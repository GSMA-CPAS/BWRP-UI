<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kt.blink.biz.fch.finance.mapper.FinanceMapper">

    
    
    <!-- retrieve retrieveFinanceList -->
    <select id="retrieveFinanceList" parameterType="FinanceDomain" resultType="FinanceDomain">
        /*FinanceMapper.retrieveFinanceList*/
        WITH mynetv AS (SELECT
                             tci.cd_val1
                         FROM tb_cd_info tci 
                         INNER JOIN tb_cd_group_info tcgi
                         ON tcgi.cd_group_id = tci.cd_group_id
                         WHERE tci.cd_group_id = 'MyNetwork'
                         AND tci.use_yn = true)
            ,eratev AS (SELECT erate_val, tgt_mon FROM tb_erate_info 
                         WHERE base_isocu_cd = 'SDR' 
                           AND tgt_isocu_cd = #{curCdSel}) 
        SELECT
            COUNT(1) OVER() AS totalCount,
            trm_plmn_id,
            rcv_plmn_id,
            cntry_nm,
            revenue,
            expense,
            profit,
            over_revenue,
            over_expense,
            over_profit,
            revenue_sum,
            expense_sum,
            profit_sum,
            over_revenue_sum,
            over_expense_sum,
            over_profit_sum,
            #{stPeriodMon} AS st_period_mon,
            #{endPeriodMon} AS end_period_mon,
            #{decPoint} AS dec_point,
            CASE WHEN EXTRACT(MONTH FROM AGE(NOW(), TO_DATE(#{endPeriodMon},'YYYYMMDD'))) = 0 THEN  TO_CHAR(TO_DATE(#{endPeriodMon},'YYYYMM') - INTERVAL '3 MONTH', 'YYYY/MM')
                 WHEN EXTRACT(MONTH FROM AGE(NOW(), TO_DATE(#{endPeriodMon},'YYYYMMDD'))) = 1 THEN  TO_CHAR(TO_DATE(#{endPeriodMon},'YYYYMM') - INTERVAL '2 MONTH', 'YYYY/MM')
                 WHEN EXTRACT(MONTH FROM AGE(NOW(), TO_DATE(#{endPeriodMon},'YYYYMMDD'))) = 2 THEN  TO_CHAR(TO_DATE(#{endPeriodMon},'YYYYMM') - INTERVAL '1 MONTH', 'YYYY/MM')
                 ELSE TO_CHAR(TO_DATE(#{endPeriodMon},'YYYYMM'), 'YYYY/MM')
              END AS over_day
        FROM (  <!-- filter -->
	        SELECT
			    trm_plmn_id,
			    rcv_plmn_id,
			    (SELECT cntry_nm 
	             FROM tb_cntry_info c 
	             INNER JOIN tb_plmn_info p ON c.mcc_id = p.mcc_id
	             WHERE p.plmn_id = rcv_plmn_id ) AS cntry_nm,
			    SUM(COALESCE(revenue,0)) AS revenue,
	            SUM(COALESCE(expense,0)) AS expense,
	            SUM(COALESCE(revenue,0) - COALESCE(expense,0)) AS profit,
	            SUM(COALESCE(over_revenue,0)) AS over_revenue,
	            SUM(COALESCE(over_expense,0)) AS over_expense,
	            SUM(COALESCE(over_revenue,0) - COALESCE(over_expense,0)) AS over_profit,
	            SUM(SUM(COALESCE(revenue,0))) OVER() AS revenue_sum,
	            SUM(SUM(COALESCE(expense,0))) OVER() AS expense_sum,
	            SUM(SUM(COALESCE(revenue,0) - COALESCE(expense,0))) OVER() AS profit_sum,
	            SUM(SUM(COALESCE(over_revenue,0))) OVER() AS over_revenue_sum,
	            SUM(SUM(COALESCE(over_expense,0))) OVER() AS over_expense_sum,
	            SUM(SUM(COALESCE(over_revenue,0) - COALESCE(over_expense,0))) OVER() AS over_profit_sum
			FROM 
			(   <!-- grp -->
			    SELECT
			        CASE WHEN invoc_direct_cd = 'OUT' THEN trm_plmn_id ELSE rcv_plmn_id END AS trm_plmn_id,
			        CASE WHEN invoc_direct_cd = 'OUT' THEN rcv_plmn_id ELSE trm_plmn_id END AS rcv_plmn_id,
			        invoc_direct_cd,
			        gbn,
	                cont_cur_cd,
	                issue_month,
	                setl_month,
	                ROUND(COALESCE((SELECT erate_val FROM eratev 
                                    WHERE tgt_mon = REPLACE(setl_month, '-','')), CASE WHEN #{curCdSel} = 'SDR' THEN 1 ELSE 0 END ) * ( (
	                                                    CASE WHEN gbn = 'INV' AND setl_month >= #{stPeriodMon} THEN revenue  
									                     WHEN gbn != 'INV' THEN revenue
									                    ELSE 0 END
	                                       )/erate_val), #{decPoint}::int) AS revenue,
			        ROUND(COALESCE((SELECT erate_val FROM eratev 
                                    WHERE tgt_mon = REPLACE(setl_month, '-','')), CASE WHEN #{curCdSel} = 'SDR' THEN 1 ELSE 0 END ) * ( (
	                                                    CASE WHEN gbn = 'INV' AND setl_month >= #{stPeriodMon} THEN expense 
									                         WHEN gbn != 'INV' THEN expense
									                    ELSE 0 END
	                                       )/erate_val), #{decPoint}::int) AS expense,
			        ROUND(COALESCE((SELECT erate_val FROM eratev 
                                    WHERE tgt_mon = REPLACE(setl_month, '-','')), CASE WHEN #{curCdSel} = 'SDR' THEN 1 ELSE 0 END ) * ( (
	                                                    CASE WHEN gbn = 'INV' AND setl_month &lt; TO_CHAR(NOW() - INTERVAL '2 MONTH', 'YYYYMM')  AND invoc_status_cd = '10' THEN revenue 
									                    ELSE 0 END
	                                       )/erate_val), #{decPoint}::int) AS over_revenue,
			        ROUND(COALESCE((SELECT erate_val FROM eratev 
                                    WHERE tgt_mon = REPLACE(setl_month, '-','')),CASE WHEN #{curCdSel} = 'SDR' THEN 1 ELSE 0 END ) * ( (
	                                                    CASE WHEN gbn = 'INV' AND setl_month &lt; TO_CHAR(NOW() - INTERVAL '2 MONTH', 'YYYYMM') AND invoc_status_cd = '10' THEN expense 
									                    ELSE 0 END
	                                       )/erate_val), #{decPoint}::int) AS over_expense                                       
			    FROM 
			    (  <!-- tin -->
			         <!-- tb_tap_file_sum -->
			       SELECT 
	                    TO_CHAR(TO_DATE(tfs.setl_month,'YYYYMM')+ INTERVAL '1 MONTH','YYYYMM') AS issue_month,
                        tfs.setl_month,
			            TO_DATE(tfs.setl_month,'YYYYMMDD')+ INTERVAL '1 MONTH' AS invoc_pbls_dt,
			            tfs.trm_plmn_id,
			            tfs.rcv_plmn_id,   
			             'REAL' AS gbn,
			            '00' AS invoc_status_cd,
	                     MAX(tfs.cur_cd) AS cont_cur_cd,
			            CASE WHEN tfs.trm_plmn_id IN (SELECT cd_val1 FROM mynetv ) THEN 'OUT'
			                     ELSE 'IN' END AS invoc_direct_cd,
			            CASE WHEN (CASE WHEN trm_plmn_id IN (SELECT cd_val1 FROM mynetv ) THEN 'OUT'
			                           ELSE 'IN' END ) = 'OUT' THEN SUM(COALESCE(tfs.moc_vo_lo_setl_amt,0) +
                                                        COALESCE(tfs.moc_vo_home_setl_amt,0) +
                                                        COALESCE(tfs.moc_vo_intl_setl_amt,0) + 
                                                        COALESCE(tfs.mtc_vo_setl_amt,0) +
                                                        COALESCE(tfs.moc_sms_setl_amt,0) +
                                                        COALESCE(tfs.mtc_sms_setl_amt,0) +
                                                        COALESCE(tfs.data_setl_amt,0) + 
                                                        COALESCE(tfs.moc_vo_lo_tax_setl_amt,0) +
                                                        COALESCE(tfs.moc_vo_home_tax_setl_amt,0) +
                                                        COALESCE(tfs.moc_vo_intl_tax_setl_amt,0) + 
                                                        COALESCE(tfs.mtc_vo_tax_setl_amt,0) +
                                                        COALESCE(tfs.moc_sms_tax_setl_amt,0) +
                                                        COALESCE(tfs.mtc_sms_tax_setl_amt,0) +
                                                        COALESCE(tfs.data_tax_setl_amt,0))
			                  ELSE 0 END AS revenue,
			            CASE WHEN (CASE WHEN trm_plmn_id IN (SELECT cd_val1 FROM mynetv ) THEN 'OUT'
			                           ELSE 'IN' END ) = 'IN' THEN SUM(COALESCE(tfs.moc_vo_lo_setl_amt,0) +
                                                        COALESCE(tfs.moc_vo_home_setl_amt,0) +
                                                        COALESCE(tfs.moc_vo_intl_setl_amt,0) + 
                                                        COALESCE(tfs.mtc_vo_setl_amt,0) +
                                                        COALESCE(tfs.moc_sms_setl_amt,0) +
                                                        COALESCE(tfs.mtc_sms_setl_amt,0) +
                                                        COALESCE(tfs.data_setl_amt,0) + 
                                                        COALESCE(tfs.moc_vo_lo_tax_setl_amt,0) +
                                                        COALESCE(tfs.moc_vo_home_tax_setl_amt,0) +
                                                        COALESCE(tfs.moc_vo_intl_tax_setl_amt,0) + 
                                                        COALESCE(tfs.mtc_vo_tax_setl_amt,0) +
                                                        COALESCE(tfs.moc_sms_tax_setl_amt,0) +
                                                        COALESCE(tfs.mtc_sms_tax_setl_amt,0) +
                                                        COALESCE(tfs.data_tax_setl_amt,0))
			                   ELSE 0 END AS expense       
		           FROM tb_tap_file_sum tfs
		           WHERE tfs.setl_month >= #{stPeriodMon}
		            AND tfs.setl_month &lt;= #{endPeriodMon}
		            AND NOT EXISTS ( SELECT 1 FROM tb_invoc_mstr m 
		                            WHERE tfs.invoc_id = m.invoc_id )
		            <choose>
	                    <when test="(trmPlmnId != null and trmPlmnId != '') and (rcvPlmnId != null and rcvPlmnId != '')">
	                          AND ( (tfs.trm_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{trmPlmnId}, ',')))   
	                         AND tfs.rcv_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{rcvPlmnId}, ','))) 
	                             )
	                         OR ( tfs.trm_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{rcvPlmnId}, ','))) 
	                         AND tfs.rcv_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{trmPlmnId}, ',')))     
	                            ) )
	                    </when>
	                    <when test="(trmPlmnId != null and trmPlmnId != '') and (rcvPlmnId == null or rcvPlmnId == '')">
	                          AND ( tfs.trm_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{trmPlmnId}, ',')))   
	                             OR tfs.rcv_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{trmPlmnId}, ',')))      
	                             )
	                    </when>
	                    <when test="(trmPlmnId == null or trmPlmnId == '') and (rcvPlmnId != null and rcvPlmnId != '')">
	                          AND ( tfs.rcv_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{rcvPlmnId}, ',')))  
	                             OR tfs.trm_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{rcvPlmnId}, ',')))     
	                             )
	                    </when>
	                 </choose>                
		           GROUP BY tfs.setl_month, tfs.trm_plmn_id, tfs.rcv_plmn_id
			            
		           UNION ALL
		             
		           SELECT <!-- tb_invoc_mstr -->
	                    TO_CHAR(invoc_pbls_dt,'YYYYMM') AS issue_month,
                        invoc_use_month AS setl_month,
			            invoc_pbls_dt,      
			            trm_plmn_id,
			            rcv_plmn_id, 
			             'INV' AS gbn,
			            invoc_status_cd,
	                    payot_cur_cd AS cont_cur_cd,
			            CASE WHEN mstr.trm_plmn_id IN (SELECT cd_val1 FROM mynetv ) THEN 'OUT'
			                    ELSE 'IN' END AS invoc_direct_cd, 
			            CASE WHEN (CASE WHEN mstr.trm_plmn_id IN (SELECT cd_val1 FROM mynetv ) THEN 'OUT'
			                                      ELSE 'IN' END ) = 'OUT' THEN COALESCE(invoc_amt,0) ELSE 0 END AS revenue,
			             CASE WHEN (CASE WHEN mstr.trm_plmn_id IN (SELECT cd_val1 FROM mynetv ) THEN 'OUT'
			                          ELSE 'IN' END ) = 'IN' THEN COALESCE(invoc_amt,0) ELSE 0 END AS expense
			       FROM tb_invoc_mstr mstr
			       WHERE invoc_use_month &lt;= #{endPeriodMon}
                   
			        <!-- AND invoc_pbls_dt &lt; TO_DATE(#{endPeriodMon},'YYYYMMDD') +  INTERVAL '1 MONTH'-->
	                <!-- AND CASE WHEN invoc_pbls_dt >= TO_DATE(#{stPeriodMon},'YYYYMMDD') THEN 1 =1 
	                         WHEN invoc_pbls_dt  + INTERVAL '2 MONTH' &lt; DATE_TRUNC('MONTH', NOW()) AND invoc_status_cd = '10' THEN 1 =1
                        ELSE 1 =2 END   -->
                    AND CASE WHEN invoc_use_month >= #{stPeriodMon} THEN 1 =1 
                             WHEN invoc_use_month &lt; TO_CHAR(NOW() - INTERVAL '2 MONTH', 'YYYYMM') AND invoc_status_cd = '10' THEN 1 =1
                        ELSE 1 =2 END      
			        <choose>
	                       <when test="(trmPlmnId != null and trmPlmnId != '') and (rcvPlmnId != null and rcvPlmnId != '')">
	                             AND ( ( mstr.trm_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{trmPlmnId}, ',')))  <!-- OUTGOING -->
	                            AND mstr.rcv_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{rcvPlmnId}, ','))) 
	                                )
	                            OR ( mstr.trm_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{rcvPlmnId}, ','))) <!-- INCOMING -->
	                            AND mstr.rcv_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{trmPlmnId}, ',')))     
	                               ) )
	                       </when>
	                       <when test="(trmPlmnId != null and trmPlmnId != '') and (rcvPlmnId == null or rcvPlmnId == '')">
	                             AND (mstr.trm_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{trmPlmnId}, ',')))    <!-- OUTGOING -->
	                            OR mstr.rcv_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{trmPlmnId}, ',')))       <!-- INCOMING -->
	                                )
	                       </when>
	                       <when test="(trmPlmnId == null or trmPlmnId == '') and (rcvPlmnId != null and rcvPlmnId != '')">
	                             AND ( mstr.rcv_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{rcvPlmnId}, ',')))    <!-- OUTGOING -->
	                            OR mstr.trm_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{rcvPlmnId}, ',')))    <!-- INCOMING -->
	                                )
	                       </when>
	                    </choose>
			       UNION ALL
			       
			       SELECT <!-- tb_note_mstr -->      
	                    TO_CHAR(TO_DATE(nm.cre_date_val,'YYYYMMDD'),'YYYYMM') issue_month,
                        trafc_day AS setl_month,    
			            TO_DATE(nm.cre_date_val,'YYYYMMDD') AS invoc_pbls_dt,		      
			            trm_plmn_id,
			            rcv_plmn_id,
			             'NOTE' AS gbn,
			            '50' AS invoc_status_cd,
	                    cont_cur_cd,
			            CASE WHEN trm_plmn_id IN (SELECT cd_val1 FROM mynetv ) THEN 'OUT'
			                                ELSE 'IN' END AS invoc_direct_cd,
			            CASE WHEN (CASE WHEN trm_plmn_id IN (SELECT cd_val1 FROM mynetv ) THEN 'OUT'
			                                          ELSE 'IN' END ) = 'OUT' THEN (COALESCE(note_amt,0)+COALESCE(tax_amt,0)) * -1 
			                                    ELSE 0 END AS revenue,  
			            CASE WHEN (CASE WHEN trm_plmn_id IN (SELECT cd_val1 FROM mynetv ) THEN 'OUT'
			                          ELSE 'IN' END ) = 'IN' THEN (COALESCE(note_amt,0)+COALESCE(tax_amt,0)) * -1 
			                          ELSE 0 END AS expense
			       FROM tb_note_mstr nm
			       WHERE note_kind_cd IN ('CN', 'DN')
			        AND nm.cre_date_val >= TO_CHAR(TO_DATE(#{stPeriodMon},'YYYYMM'), 'YYYYMMDD')
                    AND nm.cre_date_val &lt; TO_CHAR(TO_DATE(#{endPeriodMon},'YYYYMM') + INTERVAL '1 MONTH','YYYYMMDD') 
			         <choose>
	                      <when test="(trmPlmnId != null and trmPlmnId != '') and (rcvPlmnId != null and rcvPlmnId != '')">
	                            AND ( (  <!-- OUTGOING -->
	                              nm.trm_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{trmPlmnId}, ','))) 
	                           AND nm.rcv_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{rcvPlmnId}, ','))) 
	                               )
	                           OR (  <!-- INCOMING -->
	                               nm.trm_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{rcvPlmnId}, ',')))
	                           AND nm.rcv_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{trmPlmnId}, ',')))     
	                              ) )
	                      </when>
	                      <when test="(trmPlmnId != null and trmPlmnId != '') and (rcvPlmnId == null or rcvPlmnId == '')">
	                            AND ( nm.trm_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{trmPlmnId}, ',')))  <!-- OUTGOING -->
	                           OR nm.rcv_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{trmPlmnId}, ',')))   <!-- INCOMING -->
	                              ) 
	                      </when>
	                      <when test="(trmPlmnId == null or trmPlmnId == '') and (rcvPlmnId != null and rcvPlmnId != '')">
	                            AND ( nm.rcv_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{rcvPlmnId}, ',')))  <!-- OUTGOING -->
	                           OR nm.trm_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{rcvPlmnId}, ',')))      <!-- INCOMING -->
	                              ) 
	                      </when>
	               </choose>
			    ) AS tin    <!-- tap , inv, note union all query -->
	        LEFT OUTER JOIN tb_erate_info rate ON rate.base_isocu_cd = 'SDR' 
	                                              AND rate.tgt_mon = REPLACE(tin.setl_month, '-','')
	                                              AND rate.tgt_isocu_cd = tin.cont_cur_cd                                    
			) AS grp
			<where>     
        
	            <if test="mccId != null and mccId !=''" >
	                (CASE WHEN invoc_direct_cd = 'OUT' THEN rcv_plmn_id ELSE trm_plmn_id END) IN (
	                        SELECT plmn_id 
	                         FROM tb_plmn_info
	                         WHERE mcc_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{mccId}, ',')))    
	                    )
	            </if>              
	        </where>
			GROUP BY trm_plmn_id, rcv_plmn_id
			<if test="filterProfitSign != null and filterProfitSign !=''" >
                <choose>
                    <when test='filterProfitSign == "+"'>
                HAVING SUM(COALESCE(revenue,0) - COALESCE(expense,0)) > 0
                    </when>
                    <otherwise>
                HAVING SUM(COALESCE(revenue,0) - COALESCE(expense,0)) &lt; 0
                    </otherwise>
                </choose>
            </if>
            <if test="filterOverProfitSign != null and filterOverProfitSign !=''" >
                <choose>
                    <when test='filterOverProfitSign == "+"'>
                HAVING SUM(COALESCE(over_revenue,0) - COALESCE(over_expense,0)) > 0
                    </when>
                    <otherwise>
                HAVING SUM(COALESCE(over_revenue,0) - COALESCE(over_expense,0)) &lt; 0
                    </otherwise>
                </choose>
            </if>
			
		) AS  filter  <!-- filter query -->
		
               
        <choose>
            <when test="@org.apache.commons.lang3.StringUtils@isNotEmpty(dataTablesRequest.orderSequel)">
                ORDER BY ${dataTablesRequest.orderSequel}
            </when>
            <when test="@org.apache.commons.lang3.StringUtils@isNotEmpty(orderSequel)">
                ORDER BY ${orderSequel}
            </when>
            <otherwise>
                ORDER BY trm_plmn_id DESC
            </otherwise>
        </choose>
        <if test="dataTablesRequest.start != -1">
        LIMIT #{dataTablesRequest.length} OFFSET #{dataTablesRequest.start}
		</if>
    </select>
</mapper>
