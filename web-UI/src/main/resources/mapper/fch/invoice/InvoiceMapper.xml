<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kt.blink.biz.fch.invoice.mapper.InvoiceMapper">

    
    
    <!-- retrieve invoice -->
    <select id="retrieveInvoiceList" parameterType="InvoiceDomain" resultType="TapFileSumDomain">
        /*InvoiceMapper.retrieveInvoiceList*/
        WITH mynetv AS (SELECT
                             tci.cd_val1
                         FROM tb_cd_info tci 
                         INNER JOIN tb_cd_group_info tcgi
                         ON tcgi.cd_group_id = tci.cd_group_id
                         WHERE tci.cd_group_id = 'MyNetwork'
                         AND tci.use_yn = true)
            ,eratev AS (SELECT erate_val, tgt_mon FROM tb_erate_info 
                         WHERE base_isocu_cd = 'SDR' 
                           AND tgt_isocu_cd = #{curCdSel}) 
        SELECT  
           COUNT(1) OVER() AS totalCount,           
            setl_month_view, 
            issue_month,  
            trm_plmn_id,
            rcv_plmn_id,
            kind_cd_nm,
            invoc_direct_cd_nm,
            docu_nm,
            status_cd_nm,
            revenue,
            expense,            
            invoc_direct_cd,
            setl_month,  
            invoc_id,
            status_cd,
            kind_cd,
            cont_cur_cd,
            note_ref_num,
            revenueSum,
            expenseSum,
            cre_date_val,
            #{decPoint} AS dec_point,
            cret_dt                     
        FROM (  <!-- filter -->
            SELECT
                issue_month,  
                setl_month,  
                TO_CHAR(TO_DATE(setl_month,'YYYYMM'),'YYYY-MM') AS setl_month_view, 
                CASE WHEN invoc_direct_cd = 'OUT' THEN trm_plmn_id ELSE rcv_plmn_id END AS trm_plmn_id,
                CASE WHEN invoc_direct_cd = 'OUT' THEN rcv_plmn_id ELSE trm_plmn_id END AS rcv_plmn_id,
                invoc_direct_cd,
                (SELECT
                      tci.cd_val1
                  FROM tb_cd_info tci 
                  INNER JOIN tb_cd_group_info tcgi
                  ON tcgi.cd_group_id = tci.cd_group_id
                  WHERE tci.cd_group_id = 'InvDirect'
                  AND tci.cd_id = invoc_direct_cd
                  AND tci.use_yn = true ) AS invoc_direct_cd_nm,
                invoc_id,
                docu_nm,
                status_cd,
                (SELECT
                      tci.cd_val1
                  FROM tb_cd_info tci 
                  INNER JOIN tb_cd_group_info tcgi
                  ON tcgi.cd_group_id = tci.cd_group_id
                  WHERE tci.cd_group_id = 'InvoiceStat'
                  AND tci.cd_id = status_cd
                  AND tci.use_yn = true ) AS status_cd_nm,
                kind_cd,
                cont_cur_cd,
                note_ref_num,
                (SELECT
                      tci.cd_val1
                  FROM tb_cd_info tci 
                  INNER JOIN tb_cd_group_info tcgi
                  ON tcgi.cd_group_id = tci.cd_group_id
                  WHERE tci.cd_group_id = 'InvKind'
                  AND tci.cd_id = kind_cd
                  AND tci.use_yn = true ) AS kind_cd_nm,
                  ROUND(COALESCE((SELECT erate_val FROM eratev 
                                    WHERE tgt_mon = REPLACE(setl_month, '-','')), CASE WHEN #{curCdSel} = 'SDR' THEN 1 ELSE 0 END ) * (revenue/erate_val), #{decPoint}::int) AS revenue,
                  ROUND(COALESCE((SELECT erate_val FROM eratev 
                                    WHERE tgt_mon = REPLACE(setl_month, '-','')), CASE WHEN #{curCdSel} = 'SDR' THEN 1 ELSE 0 END ) * (expense/erate_val), #{decPoint}::int) AS expense,
                  SUM(ROUND(COALESCE((SELECT erate_val FROM eratev 
                                    WHERE tgt_mon = REPLACE(setl_month, '-','')), CASE WHEN #{curCdSel} = 'SDR' THEN 1 ELSE 0 END ) * (revenue/erate_val), #{decPoint}::int)) OVER() AS revenueSum, 
                  SUM(ROUND(COALESCE((SELECT erate_val FROM eratev 
                                    WHERE tgt_mon = REPLACE(setl_month, '-','')), CASE WHEN #{curCdSel} = 'SDR' THEN 1 ELSE 0 END ) * (expense/erate_val), #{decPoint}::int)) OVER() AS expenseSum,                                          
                  cre_date_val,
                  cret_dt                   
            FROM ( <!-- tin alias tap, invoice, note union all -->
                 SELECT
                     TO_CHAR(TO_DATE(tfs.setl_month,'YYYYMMDD')+ INTERVAL '1 MONTH','YYYY-MM-DD') AS issue_month,
                     tfs.setl_month,
                     tfs.trm_plmn_id,
                     tfs.rcv_plmn_id,       
                     CASE WHEN tfs.trm_plmn_id IN (SELECT cd_val1 FROM mynetv ) THEN 'OUT'
                             ELSE 'IN' END AS invoc_direct_cd, <!-- INVOICE 방향  IN/OUT-->
                     NULL AS invoc_id,
                     '' AS docu_nm,
                     CASE WHEN (CASE WHEN trm_plmn_id IN (SELECT cd_val1 FROM mynetv ) THEN 'OUT'
                               ELSE 'IN' END ) = 'OUT' THEN SUM(COALESCE(tfs.moc_vo_lo_setl_amt,0) +
                                                        COALESCE(tfs.moc_vo_home_setl_amt,0) +
                                                        COALESCE(tfs.moc_vo_intl_setl_amt,0) + 
                                                        COALESCE(tfs.mtc_vo_setl_amt,0) +
                                                        COALESCE(tfs.moc_sms_setl_amt,0) +
                                                        COALESCE(tfs.mtc_sms_setl_amt,0) +
                                                        COALESCE(tfs.data_setl_amt,0) + 
                                                        COALESCE(tfs.moc_vo_lo_tax_setl_amt,0) +
                                                        COALESCE(tfs.moc_vo_home_tax_setl_amt,0) +
                                                        COALESCE(tfs.moc_vo_intl_tax_setl_amt,0) + 
                                                        COALESCE(tfs.mtc_vo_tax_setl_amt,0) +
                                                        COALESCE(tfs.moc_sms_tax_setl_amt,0) +
                                                        COALESCE(tfs.mtc_sms_tax_setl_amt,0) +
                                                        COALESCE(tfs.data_tax_setl_amt,0))
                          ELSE 0 END AS revenue,
                     CASE WHEN (CASE WHEN trm_plmn_id IN (SELECT cd_val1 FROM mynetv ) THEN 'OUT'
                               ELSE 'IN' END ) = 'IN' THEN SUM(COALESCE(tfs.moc_vo_lo_setl_amt,0) +
                                                        COALESCE(tfs.moc_vo_home_setl_amt,0) +
                                                        COALESCE(tfs.moc_vo_intl_setl_amt,0) + 
                                                        COALESCE(tfs.mtc_vo_setl_amt,0) +
                                                        COALESCE(tfs.moc_sms_setl_amt,0) +
                                                        COALESCE(tfs.mtc_sms_setl_amt,0) +
                                                        COALESCE(tfs.data_setl_amt,0) + 
                                                        COALESCE(tfs.moc_vo_lo_tax_setl_amt,0) +
                                                        COALESCE(tfs.moc_vo_home_tax_setl_amt,0) +
                                                        COALESCE(tfs.moc_vo_intl_tax_setl_amt,0) + 
                                                        COALESCE(tfs.mtc_vo_tax_setl_amt,0) +
                                                        COALESCE(tfs.moc_sms_tax_setl_amt,0) +
                                                        COALESCE(tfs.mtc_sms_tax_setl_amt,0) +
                                                        COALESCE(tfs.data_tax_setl_amt,0)) 
                           ELSE 0 END AS expense,                               
                     '00' AS status_cd,
                     'INV' AS kind_cd,
                     MAX(tfs.cur_cd) AS cont_cur_cd,
                    '' AS note_ref_num,                    
                   TO_DATE(MAX(file_cret_date_val),'YYYYMMDDHH24MISS') AS cre_date_val,
                   MAX(sys_recd_cret_dt) AS cret_dt
                 FROM tb_tap_file_sum tfs
                 <choose>
                    <when test='dateGbn != null and dateGbn == "sett"'>
                  WHERE tfs.setl_month >= #{stPeriodMon}
                   AND tfs.setl_month &lt;= #{endPeriodMon}
                    </when>
                    <otherwise>
                 WHERE tfs.setl_month >= TO_CHAR(TO_DATE(#{stPeriodMon},'YYYYMM')- INTERVAL '1 MONTH','YYYYMM') 
                   AND tfs.setl_month &lt; TO_CHAR(TO_DATE(#{endPeriodMon},'YYYYMM'),'YYYYMM') 
                    </otherwise>
                 </choose>
                   AND NOT EXISTS ( SELECT 1 FROM tb_invoc_mstr m 
                                    WHERE tfs.invoc_id = m.invoc_id )
                 <choose>
                    <when test="(trmPlmnId != null and trmPlmnId != '') and (rcvPlmnId != null and rcvPlmnId != '')">
                          AND ( (tfs.trm_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{trmPlmnId}, ',')))   <!-- OUTGOING -->
                         AND tfs.rcv_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{rcvPlmnId}, ','))) 
                             )
                         OR ( tfs.trm_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{rcvPlmnId}, ','))) <!-- INCOMING -->
                         AND tfs.rcv_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{trmPlmnId}, ',')))     
                            ) )
                    </when>
                    <when test="(trmPlmnId != null and trmPlmnId != '') and (rcvPlmnId == null or rcvPlmnId == '')">
                          AND ( tfs.trm_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{trmPlmnId}, ',')))   <!-- OUTGOING -->
                             OR tfs.rcv_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{trmPlmnId}, ',')))       <!-- INCOMING -->
                             )
                    </when>
                    <when test="(trmPlmnId == null or trmPlmnId == '') and (rcvPlmnId != null and rcvPlmnId != '')">
                          AND ( tfs.rcv_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{rcvPlmnId}, ',')))  <!-- OUTGOING -->
                             OR tfs.trm_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{rcvPlmnId}, ',')))      <!-- INCOMING -->
                             )
                    </when>
                 </choose>
                 
	            <if test='kindCd != null and kindCd !=""'>
	                AND 'INV' = #{kindCd} 
	            </if>
	               
                 <choose>
                     <when test='statusCd != null and (statusCd =="00" or statusCd =="")'>
                       AND 1 = 1
                     </when>                                      
                    <otherwise>
                      AND 1 = 2
                    </otherwise>
                 </choose>
                 GROUP BY tfs.setl_month, tfs.trm_plmn_id, tfs.rcv_plmn_id 
                
                UNION ALL
              <!-- invoice info st -->
                SELECT
                    TO_CHAR(invoc_pbls_dt,'YYYY-MM-DD') AS issue_month,
                    mstr.invoc_use_month AS setl_month,
                    trm_plmn_id,
                    rcv_plmn_id,
                    CASE WHEN mstr.trm_plmn_id IN (SELECT cd_val1 FROM mynetv ) THEN 'OUT'
                            ELSE 'IN' END AS invoc_direct_cd, 
                     mstr.invoc_id,
                     mstr.invoc_nm AS docu_nm,
                     CASE WHEN (CASE WHEN mstr.trm_plmn_id IN (SELECT cd_val1 FROM mynetv ) THEN 'OUT'
                                  ELSE 'IN' END ) = 'OUT' THEN COALESCE(invoc_amt,0) ELSE 0 END AS revenue,
                     CASE WHEN (CASE WHEN mstr.trm_plmn_id IN (SELECT cd_val1 FROM mynetv ) THEN 'OUT'
                                  ELSE 'IN' END ) = 'IN' THEN COALESCE(invoc_amt,0) ELSE 0 END AS expense,
                     CASE WHEN mstr.invoc_status_cd = '10' AND TO_DATE(mstr.invoc_use_month,'YYYYMM') &lt; DATE_TRUNC('MONTH', NOW() - INTERVAL '2 MONTH') THEN '20'
                         WHEN mstr.invoc_status_cd = '30' AND mstr.trm_plmn_id IN (SELECT cd_val1 FROM mynetv ) THEN '40'
                         WHEN mstr.invoc_status_cd = '30' AND mstr.rcv_plmn_id IN (SELECT cd_val1 FROM mynetv) THEN '30'
                         WHEN (mstr.invoc_status_cd = '') is not false = false THEN mstr.invoc_status_cd
                        ELSE '' END AS status_cd,
                    'INV' AS kind_cd,
                    payot_cur_cd AS cont_cur_cd,
                    '' AS note_ref_num,
                    invoc_pbls_dt AS cre_date_val,
                    sys_recd_cret_dt AS cret_dt
                FROM tb_invoc_mstr mstr 
                <choose>
                    <when test='dateGbn != null and dateGbn == "sett"'>
                  WHERE invoc_use_month >= #{stPeriodMon}
                   AND invoc_use_month &lt;= #{endPeriodMon}
                    </when>
                    <otherwise>
                WHERE invoc_pbls_dt >= TO_DATE(#{stPeriodMon},'YYYYMM')
                  AND invoc_pbls_dt &lt; TO_DATE(#{endPeriodMon},'YYYYMM') +  INTERVAL '1 MONTH'
                    </otherwise>
                 </choose>
                <choose>
                       <when test="(trmPlmnId != null and trmPlmnId != '') and (rcvPlmnId != null and rcvPlmnId != '')">
                             AND ( ( mstr.trm_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{trmPlmnId}, ',')))  <!-- OUTGOING -->
                            AND mstr.rcv_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{rcvPlmnId}, ','))) 
                                )
                            OR ( mstr.trm_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{rcvPlmnId}, ','))) <!-- INCOMING -->
                            AND mstr.rcv_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{trmPlmnId}, ',')))     
                               ) )
                       </when>
                       <when test="(trmPlmnId != null and trmPlmnId != '') and (rcvPlmnId == null or rcvPlmnId == '')">
                             AND (mstr.trm_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{trmPlmnId}, ',')))    <!-- OUTGOING -->
                            OR mstr.rcv_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{trmPlmnId}, ',')))       <!-- INCOMING -->
                                )
                       </when>
                       <when test="(trmPlmnId == null or trmPlmnId == '') and (rcvPlmnId != null and rcvPlmnId != '')">
                             AND ( mstr.rcv_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{rcvPlmnId}, ',')))    <!-- OUTGOING -->
                            OR mstr.trm_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{rcvPlmnId}, ',')))    <!-- INCOMING -->
                                )
                       </when>
                </choose>
                
               <if test='kindCd != null and kindCd !=""'>
                    AND 'INV' = #{kindCd} 
               </if>
                AND CASE WHEN #{statusCd} IN ('50', '00') THEN mstr.invoc_status_cd = #{statusCd}
                         WHEN #{statusCd} = '10' THEN mstr.invoc_status_cd = '10' AND TO_DATE(mstr.invoc_use_month,'YYYYMM') >= DATE_TRUNC('MONTH', NOW() - INTERVAL '2 MONTH')
                         WHEN #{statusCd} = '20' THEN mstr.invoc_status_cd = '10' AND TO_DATE(mstr.invoc_use_month,'YYYYMM') &lt; DATE_TRUNC('MONTH', NOW() - INTERVAL '2 MONTH')
                         WHEN #{statusCd} = '40' THEN mstr.trm_plmn_id IN (SELECT cd_val1 FROM mynetv) <!-- OUTGOING -->
                                                        AND mstr.invoc_status_cd = '30'
                         WHEN #{statusCd} = '30' THEN mstr.rcv_plmn_id IN (SELECT cd_val1 FROM mynetv) <!-- INCOMING -->
                                                        AND mstr.invoc_status_cd = '30'
                         ELSE 1=1 END
                 <!-- invoice info end -->           
                           
                UNION ALL
                <!-- note info -->
               SELECT
                  TO_CHAR(TO_DATE(nm.cre_date_val,'YYYYMMDD'),'YYYY-MM-DD') issue_month,
                  trafc_day AS setl_month,    
                  trm_plmn_id,
                  rcv_plmn_id,
                  CASE WHEN nm.trm_plmn_id IN (SELECT cd_val1 FROM mynetv ) THEN 'OUT'
                        ELSE 'IN' END AS invoc_direct_cd,
                   nm.invoc_id,
                   note_ref_num AS docu_nm,
                   CASE WHEN (CASE WHEN nm.trm_plmn_id IN (SELECT cd_val1 FROM mynetv  ) THEN 'OUT'
                                  ELSE 'IN' END ) = 'IN' AND nm.note_kind_cd = 'CNA' THEN (COALESCE(note_amt,0)+COALESCE(tax_amt,0)) * -1 <!-- IN => CNA => REVENUE -->
                         WHEN (CASE WHEN nm.trm_plmn_id IN (SELECT cd_val1 FROM mynetv  ) THEN 'OUT'
                                  ELSE 'IN' END ) = 'OUT' AND nm.note_kind_cd != 'CNA' THEN (COALESCE(note_amt,0)+COALESCE(tax_amt,0)) * -1 <!-- OUT => CN/DN => REVENUE -->
                        ELSE 0 END AS revenue,  
                   CASE WHEN (CASE WHEN nm.trm_plmn_id IN (SELECT cd_val1 FROM mynetv ) THEN 'OUT'
                                  ELSE 'IN' END ) = 'OUT' AND nm.note_kind_cd = 'CNA' THEN (COALESCE(note_amt,0)+COALESCE(tax_amt,0)) * -1 <!-- OUT => CNA => EXPENSE -->
                        WHEN (CASE WHEN nm.trm_plmn_id IN (SELECT cd_val1 FROM mynetv  ) THEN 'OUT'
                                  ELSE 'IN' END ) = 'IN' AND nm.note_kind_cd != 'CNA' THEN (COALESCE(note_amt,0)+COALESCE(tax_amt,0)) * -1  <!-- IN => CN/DN => EXPENSE -->
                        ELSE 0 END AS expense,   
                   nm.note_status_cd AS status_cd,
                   nm.note_kind_cd AS kind_cd,
                   nm.cont_cur_cd,
                   nm.note_ref_num,
                   TO_DATE(nm.cre_date_val,'YYYYMMDDHH24MISS') AS cre_date_val,
                   sys_recd_cret_dt AS cret_dt
               FROM tb_note_mstr nm
               <choose>
                    <when test='dateGbn != null and dateGbn == "sett"'>
                  WHERE trafc_day >= #{stPeriodMon}
                   AND trafc_day &lt;= #{endPeriodMon}
                    </when>
                    <otherwise>
               WHERE nm.cre_date_val >= TO_CHAR(TO_DATE(#{stPeriodMon},'YYYYMM'), 'YYYYMMDD')
                 AND nm.cre_date_val &lt; TO_CHAR(TO_DATE(#{endPeriodMon},'YYYYMM') + INTERVAL '1 MONTH','YYYYMMDD')   
                    </otherwise>
               </choose>
               <choose>
                      <when test="(trmPlmnId != null and trmPlmnId != '') and (rcvPlmnId != null and rcvPlmnId != '')">
                            AND ( (  <!-- OUTGOING -->
                              nm.trm_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{trmPlmnId}, ','))) 
                           AND nm.rcv_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{rcvPlmnId}, ','))) 
                               )
                           OR (  <!-- INCOMING -->
                               nm.trm_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{rcvPlmnId}, ',')))
                           AND nm.rcv_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{trmPlmnId}, ',')))     
                              ) )
                      </when>
                      <when test="(trmPlmnId != null and trmPlmnId != '') and (rcvPlmnId == null or rcvPlmnId == '')">
                            AND ( nm.trm_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{trmPlmnId}, ',')))  <!-- OUTGOING -->
                           OR nm.rcv_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{trmPlmnId}, ',')))   <!-- INCOMING -->
                              ) 
                      </when>
                      <when test="(trmPlmnId == null or trmPlmnId == '') and (rcvPlmnId != null and rcvPlmnId != '')">
                            AND ( nm.rcv_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{rcvPlmnId}, ',')))  <!-- OUTGOING -->
                           OR nm.trm_plmn_id IN (SELECT UNNEST(STRING_TO_ARRAY(#{rcvPlmnId}, ',')))      <!-- INCOMING -->
                              ) 
                      </when>
               </choose>
               <if test='kindCd != null and kindCd !=""'>
                    AND nm.note_kind_cd = #{kindCd} 
               </if>
               <choose>
                   <when test='statusCd != null and (statusCd =="10" or statusCd =="50")'>
                       AND nm.note_status_cd = #{statusCd}
                   </when>
                   <when test='statusCd != null and statusCd ==""'>
                       AND 1 = 1
                   </when>
                   <otherwise>
                       AND 1 = 2
                   </otherwise>
              </choose>
            ) AS tin <!-- tap , inv, note union all query -->
           LEFT OUTER JOIN tb_erate_info rate ON rate.base_isocu_cd = 'SDR' 
                                              AND rate.tgt_mon = REPLACE(tin.setl_month, '-','')
                                              AND rate.tgt_isocu_cd = tin.cont_cur_cd
            <where>
                <if test="invocDirectCd != null and invocDirectCd !=''">
                    invoc_direct_cd = #{invocDirectCd}
                </if>
            </where>
        ) AS filter  <!-- filter query -->            
        <choose>
            <when test="@org.apache.commons.lang3.StringUtils@isNotEmpty(dataTablesRequest.orderSequel)">
                ORDER BY ${dataTablesRequest.orderSequel} , cret_dt DESC
            </when>
            <when test="@org.apache.commons.lang3.StringUtils@isNotEmpty(orderSequel)">
                ORDER BY ${orderSequel}
            </when>
            <otherwise>
                <choose>
                    <when test='dateGbn != null and dateGbn == "sett"'>
                ORDER BY setl_month_view DESC, issue_month DESC, cret_dt DESC
                    </when>
                    <otherwise>
                ORDER BY issue_month DESC, setl_month_view DESC, cret_dt DESC 
                    </otherwise>
               </choose>
                
            </otherwise>
        </choose>
        
        <if test="dataTablesRequest.start != -1">
        LIMIT #{dataTablesRequest.length} OFFSET #{dataTablesRequest.start}
        </if>
    </select>
    
    <!-- update updateInvoiceStat -->
    <update id="updateInvoiceStat" >
        /*InvoiceMapper.updateInvoiceStat*/
        UPDATE tb_invoc_mstr
        SET
            invoc_status_cd = #{invoc.statusCd},
                <if test='invoc.statusCd != null and invoc.statusCd == "30"'>
                    prvd_date = NOW(),
                </if>
               <if test='invoc.statusCd != null and invoc.statusCd == "50"'>
                    dps_conf_date = NOW(),                
                </if>
            sys_recd_chg_dt = NOW(),
            sys_trtr_id = #{invoc.sysTrtrId},
            sys_svc_id = #{invoc.sysSvcId}
        WHERE invoc_id IN (
            <foreach collection="invoc.invocIds" item="invocId" separator=",">
                #{invocId}
            </foreach>
        )        
    </update>
    <!-- invoice info -->
    <select id="getInvocInfo" resultType="InvoiceDomain">
        /*InvoiceMapper.getInvocInfo*/
        WITH mynetv AS (SELECT
                             tci.cd_val1
                         FROM tb_cd_info tci 
                         INNER JOIN tb_cd_group_info tcgi
                         ON tcgi.cd_group_id = tci.cd_group_id
                         WHERE tci.cd_group_id = 'MyNetwork'
                         AND tci.use_yn = true)
        SELECT
            mstr.invoc_id,
            invoc_nm,
            TO_CHAR(invoc_pbls_dt, 'YYYY-MM-DD') AS invoc_pbls_dt,
            (SELECT
                 COALESCE(tci.cd_val2, tci.cd_val1)
             FROM tb_cd_info tci INNER JOIN tb_cd_group_info tcgi
             ON tcgi.cd_group_id = tci.cd_group_id
             WHERE tci.cd_group_id = 'ContType'
             AND tci.cd_id = setl_drect_cd
             AND tci.use_yn = true) AS setl_drect_cd_nm,
            setl_drect_cd,
            payot_cur_cd,
            payot_due_day,
            TO_CHAR(payot_due_date, 'YYYY-MM-DD') AS payot_due_date,
            bank_nm,
            swift_cd,
            acc_nm,
            acc_no,
            iban_no,
            corresp_bank_nm,
            corresp_swift_cd,
            CASE WHEN mstr.invoc_status_cd = '10' AND TO_DATE(invoc_use_month,'YYYYMM') + INTERVAL '2 MONTH' &lt; DATE_TRUNC('MONTH', NOW()) THEN '20'
                         WHEN mstr.invoc_status_cd = '30' AND #{invoc.invocDirectCd} = 'IN' THEN '30'
                         WHEN mstr.invoc_status_cd = '30' AND #{invoc.invocDirectCd} = 'OUT' THEN '40'
                         ELSE mstr.invoc_status_cd END AS invoc_status_cd,
            (SELECT
                 tci.cd_val1
             FROM tb_cd_info tci INNER JOIN tb_cd_group_info tcgi
             ON tcgi.cd_group_id = tci.cd_group_id
             WHERE tci.cd_group_id = 'InvoiceStat'
             AND tci.cd_id = (
                      CASE WHEN mstr.invoc_status_cd = '10' AND TO_DATE(invoc_use_month,'YYYYMM') + INTERVAL '2 MONTH' &lt; DATE_TRUNC('MONTH', NOW()) THEN '20'
                   WHEN mstr.invoc_status_cd = '30' AND #{invoc.invocDirectCd} = 'IN' THEN '30'
                   WHEN mstr.invoc_status_cd = '30' AND #{invoc.invocDirectCd} = 'OUT' THEN '40'
                   ELSE mstr.invoc_status_cd END
             )
             AND tci.use_yn = true)  AS status_cd_nm,
            prvd_date,
            dps_conf_date,
            cont_dtl_id,
            invoc_use_month,
            TO_CHAR(TO_DATE(invoc_use_month,'YYYYMM'),'YYYY-MM')  AS setlMonth,
            trm_cmpn_nm,
            trm_cmpn_adr,
            rcv_cmpn_nm,
            rcv_cmpn_adr,
            trm_plmn_id,
            rcv_plmn_id,
            CASE WHEN (CASE WHEN mstr.trm_plmn_id IN (SELECT cd_val1 FROM mynetv ) THEN 'OUT'
                         ELSE 'IN' END ) = 'OUT' THEN COALESCE(invoc_amt,0) ELSE 0 END AS revenue,
            CASE WHEN (CASE WHEN mstr.trm_plmn_id IN (SELECT cd_val1 FROM mynetv) THEN 'OUT'
                         ELSE 'IN' END ) = 'IN' THEN COALESCE(invoc_amt,0) ELSE 0 END AS expense,
            TO_CHAR(TO_DATE(trafc_st_day,'YYYYMMDD'),'YYYY-MM-DD') AS trafc_st_day,
            TO_CHAR(TO_DATE(trafc_end_day,'YYYYMMDD'),'YYYY-MM-DD') AS trafc_end_day,
            min_tap_seq,
            max_tap_seq,
            cont_nm, 
            cont_tel_no, 
            cont_fax_no, 
            cont_email,
            tax_no,
            ROUND(commit_total_rate,1) AS commit_total_rate,
            ROUND(commit_period_rate,1) AS commit_period_rate
        FROM tb_invoc_mstr mstr
        LEFT OUTER JOIN (SELECT 
                        MIN(st_tap_seq) AS min_tap_seq,
                        MAX(end_tap_seq) AS max_tap_seq,
                        MAX(invoc_id) AS invoc_id
                    FROM tb_tap_date_sum 
                    WHERE invoc_id = #{invoc.invocId} ) dsum ON dsum.invoc_id = mstr.invoc_id
        WHERE mstr.invoc_id = #{invoc.invocId}
    </select>
    
    <!-- invoice amt list -->
    <select id="getInvocAmtList" resultType="InvoiceAmtListDomain">
        /*InvoiceMapper.getInvocAmtList*/
        WITH erate AS (SELECT erate_val, invoc_change_cur 
                    FROM tb_invoc_erate_list e 
                    WHERE e.invoc_id = #{invoc.invocId}
                      AND e.invoc_bas_cur = 'SDR')
        SELECT
            l.invoc_id,
            l.invoc_cur,
            ROUND(COALESCE(l.invoc_amt,0), #{invoc.decPoint}::int) AS invoc_amt,
            ROUND(l.tax_amt, #{invoc.decPoint}::int) AS tax_amt,
            ROUND(COALESCE(l.invoc_amt,0), #{invoc.decPoint}::int) + 
            ROUND(CASE WHEN COALESCE(agree_sub_charge_amt,0) > 0 THEN COALESCE(agree_sub_charge_amt,0) ELSE COALESCE(sendorpay,0) END, #{invoc.decPoint}::int) + 
            ROUND(COALESCE(l.tax_amt,0), #{invoc.decPoint}::int)  AS post_invoc_amt,
            ROUND(l.dc_amt, #{invoc.decPoint}::int) AS dc_amt,
            ROUND(COALESCE(l.invoc_amt,0), #{invoc.decPoint}::int) + 
            ROUND(CASE WHEN COALESCE(agree_sub_charge_amt,0) > 0 THEN COALESCE(agree_sub_charge_amt,0) ELSE COALESCE(sendorpay,0) END, #{invoc.decPoint}::int) + 
            ROUND(COALESCE(l.tax_amt,0), #{invoc.decPoint}::int) AS tot_amt,       
            m.trafc_st_day,
            m.trafc_end_day,
            ROUND(CASE WHEN COALESCE(agree_sub_charge_amt,0) > 0 THEN COALESCE(agree_sub_charge_amt,0) ELSE COALESCE(sendorpay,0) END, #{invoc.decPoint}::int) AS send_or_pay  
        FROM tb_invoc_amt_list l
        INNER JOIN tb_invoc_mstr m ON m.invoc_id = l.invoc_id
        LEFT OUTER JOIN (
                            SELECT
		                        invoc_id,
		                        invoc_cur,
		                        CASE WHEN cur_cd = invoc_cur THEN sum_amt 
		                            WHEN invoc_cur = 'SDR' THEN  sum_amt/(select erate.erate_val FROM erate WHERE erate.invoc_change_cur = re.cur_cd)
		                            ELSE (sum_amt/(SELECT erate.erate_val FROM erate WHERE erate.invoc_change_cur = re.cur_cd)) * 
		                                 (select erate.erate_val FROM erate WHERE erate.invoc_change_cur = re.invoc_cur)
		                            END sendorpay                                                           
                            FROM (
		                      SELECT  
		                         spcl.fix_amt - (SELECT
		                           SUM(invoc_amt)
		                         FROM tb_invoc_mstr  
		                         WHERE invoc_use_month >= TO_CHAR(cont_st_date,'YYYYMM')
		                          AND invoc_use_month &lt;= TO_CHAR(TO_DATE(#{invoc.trafcEndDay},'YYYY-MM-DD'),'YYYYMM') 
		                          AND rcv_plmn_id = #{invoc.rcvPlmnId}
		                          AND trm_plmn_id = #{invoc.trmPlmnId}) as sum_amt, 
		                         dtl.cont_cur_cd AS cur_cd,
		                         cu.invoc_id,
		                         cu.invoc_cur
			                  FROM tb_dc_cont_mstr mstr 
			                  INNER JOIN tb_dc_cont_dtl dtl ON  mstr.cont_id = dtl.cont_id 
			                                                AND cont_exp_date >= TO_DATE(REPLACE(#{invoc.trafcStDay},'-',''),'YYYYMMDD') 
			                                                AND cont_exp_date &lt;= TO_DATE(REPLACE(#{invoc.trafcStDay},'-',''),'YYYYMMDD') 
			                                                AND cont_sttus_cd = 'AGR'
			                  INNER JOIN tb_dc_cont_spcl_tarif spcl ON dtl.cont_dtl_id =  spcl.cont_dtl_id    
			                                                AND spcl.model_type_cd = 'CMIT'
			                                                AND spcl.step_no = 1
			                                                AND spcl.thrs_type_cd = 'FXC'
			                  LEFT OUTER JOIN (SELECT
			                                l.invoc_id,
			                                l.invoc_cur,
			                                m.invoc_use_month
			                            FROM tb_invoc_amt_list l
			                            INNER JOIN tb_invoc_mstr m ON m.invoc_id = l.invoc_id
			                            where l.invoc_id = #{invoc.invocId}) cu on 1 =1                            
			                    WHERE rcv_plmn_id LIKE '%' || #{invoc.rcvPlmnId} || '%' 
			                      AND trm_plmn_id LIKE '%' || #{invoc.trmPlmnId} || '%'
			                  ORDER BY spcl.sys_recd_cret_dt DESC
                              LIMIT 1
		                   ) AS re
         ) AS sp ON sp.invoc_id = l.invoc_id AND l.invoc_cur = sp.invoc_cur
        WHERE l.invoc_id = #{invoc.invocId}
        ORDER BY CASE WHEN l.invoc_cur = 'SDR' THEN 'ZZZ' ELSE l.invoc_cur END ASC
    </select>
    
    <!-- invoice erate list -->
    <select id="getInvocErateList" resultType="InvoiceErateListDomain">
        /*InvoiceMapper.getInvocErateList*/
        SELECT
            l.invoc_id,
            l.invoc_bas_cur,
            l.invoc_change_cur,
            TO_CHAR(TO_DATE(l.erate_base_day,'YYYYMMDD'),'YYYY-MM-DD') AS erate_base_day,
            l.erate_val
        FROM tb_invoc_erate_list l
        INNER JOIN tb_invoc_mstr m ON m.invoc_id = l.invoc_id
        WHERE l.invoc_id = #{invoc.invocId}
        ORDER BY invoc_change_cur ASC
    </select>
    
    <!-- invoice detail retrieve tap daily sum -->
    <select id="retrieveDayTapList" resultType="TapFileSumDomain">
        /*InvoiceMapper.retrieveDayTapList*/
        WITH eratev AS (SELECT erate_val, tgt_mon FROM tb_erate_info 
                            WHERE base_isocu_cd = 'SDR' 
                             AND tgt_isocu_cd = #{invoc.curCdSel}
        )
        SELECT
            COUNT(1) OVER() AS totalCount,
            file_cret_date_val, 
            trm_plmn_id,
            rcv_plmn_id,
            (SELECT
                  tci.cd_val1
              FROM tb_cd_info tci 
              INNER JOIN tb_cd_group_info tcgi
              ON tcgi.cd_group_id = tci.cd_group_id
              WHERE tci.cd_group_id = 'TapDirect'
              AND tci.cd_id = #{invoc.invocDirectCd}
              AND tci.use_yn = true ) AS invoc_direct_cd_nm,
            st_tap_seq || '~' || end_tap_seq AS tap_seq,
            moc_vo_recd_cnt,   
            FLOOR(moc_vo_use_qnt) AS moc_vo_use_qnt,  
            ROUND(COALESCE((SELECT erate_val FROM eratev 
                            WHERE tgt_mon = REPLACE(setl_month, '-','')), CASE WHEN #{invoc.curCdSel} = 'SDR' THEN 1 ELSE 0 END) * (moc_vo_calc_amt/erate_val), #{invoc.decPoint}::int) AS moc_vo_calc_amt, 
            mtc_vo_recd_cnt, 
            FLOOR(mtc_vo_use_qnt) AS mtc_vo_use_qnt, 
            ROUND(COALESCE((SELECT erate_val FROM eratev 
                            WHERE tgt_mon = REPLACE(setl_month, '-','')), CASE WHEN #{invoc.curCdSel} = 'SDR' THEN 1 ELSE 0 END) * (mtc_vo_calc_amt/erate_val), #{invoc.decPoint}::int) AS mtc_vo_calc_amt,
            data_recd_cnt,
            FLOOR(data_use_qnt) AS data_use_qnt,
            sms_recd_cnt,  
            FLOOR(sms_use_qnt) AS sms_use_qnt, 
            ROUND(COALESCE((SELECT erate_val FROM eratev 
                            WHERE tgt_mon = REPLACE(setl_month, '-','')), CASE WHEN #{invoc.curCdSel} = 'SDR' THEN 1 ELSE 0 END) * (sms_calc_amt/erate_val), #{invoc.decPoint}::int) AS sms_calc_amt,
            ROUND(COALESCE((SELECT erate_val FROM eratev 
                            WHERE tgt_mon = REPLACE(setl_month, '-','')), CASE WHEN #{invoc.curCdSel} = 'SDR' THEN 1 ELSE 0 END) * (data_calc_amt/erate_val), #{invoc.decPoint}::int) AS data_calc_amt,
            tot_sum_recd_cnt, 
            ROUND(COALESCE((SELECT erate_val FROM eratev 
                            WHERE tgt_mon = REPLACE(setl_month, '-','')), CASE WHEN #{invoc.curCdSel} = 'SDR' THEN 1 ELSE 0 END) * (tot_sum_amt/erate_val), #{invoc.decPoint}::int) AS tot_sum_amt,
            setl_month,
            cur_cd,
            #{invoc.decPoint} AS dec_point
        FROM (
            SELECT
                CASE WHEN 'OUT' = 'OUT' THEN min(trm_plmn_id) ELSE min(rcv_plmn_id) END AS trm_plmn_id,
                CASE WHEN 'OUT' = 'OUT' THEN min(rcv_plmn_id) ELSE min(trm_plmn_id) END AS rcv_plmn_id,
                TO_CHAR(TO_DATE(file_cret_date_val,'YYYYMMDD'),'YYYY-MM-DD') AS file_cret_date_val, 
                ( SUM(COALESCE(moc_vo_lo_recd_cnt,0)) + SUM(COALESCE(moc_vo_home_recd_cnt,0)) + SUM(COALESCE(moc_vo_intl_recd_cnt,0))) AS moc_vo_recd_cnt,   
                (SUM(COALESCE(moc_vo_lo_use_qnt,0)) + SUM(COALESCE(moc_vo_home_use_qnt,0)) + SUM(COALESCE(moc_vo_intl_use_qnt,0))) AS moc_vo_use_qnt,   
                (SUM(COALESCE(moc_vo_lo_setl_amt,0)) + SUM(COALESCE(moc_vo_home_setl_amt,0)) + SUM(COALESCE(moc_vo_intl_setl_amt,0)) +
                 SUM(COALESCE(moc_vo_lo_tax_setl_amt,0)) + SUM(COALESCE(moc_vo_home_tax_setl_amt,0)) + SUM(COALESCE(moc_vo_intl_tax_setl_amt,0))) AS moc_vo_calc_amt,   
                SUM(COALESCE(mtc_vo_recd_cnt,0)) AS mtc_vo_recd_cnt, 
                SUM(COALESCE(mtc_vo_use_qnt,0)) AS mtc_vo_use_qnt, 
                SUM(COALESCE(mtc_vo_setl_amt,0)) + SUM(COALESCE(mtc_vo_tax_setl_amt,0)) AS mtc_vo_calc_amt,  
                (SUM(COALESCE(moc_sms_recd_cnt,0)) + SUM(COALESCE(mtc_sms_recd_cnt,0))) AS sms_recd_cnt,  
                (SUM(COALESCE(moc_sms_use_qnt,0)) + SUM(COALESCE(mtc_sms_use_qnt,0))) AS sms_use_qnt, 
                (SUM(COALESCE(moc_sms_setl_amt,0)) + SUM(COALESCE(mtc_sms_setl_amt,0)) + SUM(COALESCE(moc_sms_tax_setl_amt,0)) + SUM(COALESCE(mtc_sms_tax_setl_amt,0))) AS sms_calc_amt,  
                SUM(COALESCE(data_recd_cnt,0)) AS data_recd_cnt,
                SUM(COALESCE(data_use_qnt,0)) AS data_use_qnt,
                SUM(COALESCE(data_setl_amt,0)) + SUM(COALESCE(data_tax_setl_amt,0)) AS data_calc_amt, 
                (SUM(COALESCE(moc_vo_lo_recd_cnt,0)) + SUM(COALESCE(moc_vo_home_recd_cnt,0)) + SUM(COALESCE(moc_vo_intl_recd_cnt,0)) + 
                SUM(COALESCE(mtc_vo_recd_cnt,0)) + SUM(COALESCE(moc_sms_recd_cnt,0)) + SUM(COALESCE(mtc_sms_recd_cnt,0)) + SUM(COALESCE(data_recd_cnt,0))) AS tot_sum_recd_cnt, 
                (SUM(COALESCE(moc_vo_lo_setl_amt,0)) + SUM(COALESCE(moc_vo_home_setl_amt,0)) + SUM(COALESCE(moc_vo_intl_setl_amt,0)) +
                 SUM(COALESCE(moc_vo_lo_tax_setl_amt,0)) + SUM(COALESCE(moc_vo_home_tax_setl_amt,0)) + SUM(COALESCE(moc_vo_intl_tax_setl_amt,0)) +
                SUM(COALESCE(mtc_vo_setl_amt,0)) + SUM(COALESCE(mtc_vo_tax_setl_amt,0)) +
                SUM(COALESCE(moc_sms_setl_amt,0)) + SUM(COALESCE(mtc_sms_setl_amt,0)) + SUM(COALESCE(moc_sms_tax_setl_amt,0)) + SUM(COALESCE(mtc_sms_tax_setl_amt,0)) + 
                SUM(COALESCE(data_setl_amt,0)) + SUM(COALESCE(data_tax_setl_amt,0))) AS tot_sum_amt,   
                max(setl_month) as setl_month,
                TO_CHAR(TO_DATE(max(setl_month), 'YYYYMM') + INTERVAL '1 MONTH', 'YYYYMM') AS issue_month,
                MAX(cur_cd) as cur_cd,
                min(file_seq_no) as st_tap_seq,
                max(file_seq_no) as end_tap_seq,
                max(erate_val) as erate_val,
                dsum.invoc_id
            FROM tb_tap_file_sum dsum     
            INNER JOIN tb_invoc_erate_list rate ON rate.invoc_id = dsum.invoc_id
                                              AND rate.invoc_change_cur = dsum.cur_cd
            WHERE dsum.invoc_id = #{invoc.invocId}
            group by dsum.invoc_id, file_cret_date_val
        ) AS filter        
        <choose>
            <when test="@org.apache.commons.lang3.StringUtils@isNotEmpty(invoc.dataTablesRequest.orderSequel)">
                ORDER BY ${invoc.dataTablesRequest.orderSequel}
            </when>
            <when test="@org.apache.commons.lang3.StringUtils@isNotEmpty(invoc.orderSequel)">
                ORDER BY ${invoc.orderSequel}
            </when>
            <otherwise>
                ORDER BY file_cret_date_val DESC
            </otherwise>
        </choose>
    </select>
    
    <select id="retrieveDayTapListSum" resultType="TapFileSumDomain">
        /*InvoiceMapper.retrieveDayTapListSum*/
        WITH eratev AS (SELECT erate_val, tgt_mon FROM tb_erate_info 
                            WHERE base_isocu_cd = 'SDR' 
                             AND tgt_isocu_cd = #{invoc.curCdSel}
        )
        SELECT
            SUM(moc_vo_recd_cnt) AS moc_vo_recd_cnt,   
            SUM(FLOOR(moc_vo_use_qnt)) AS moc_vo_use_qnt,  
            ROUND(SUM(COALESCE((SELECT erate_val FROM eratev 
                            WHERE tgt_mon = REPLACE(setl_month, '-','')), CASE WHEN #{invoc.curCdSel} = 'SDR' THEN 1 ELSE 0 END) * (moc_vo_calc_amt/erate_val)), #{invoc.decPoint}::int) AS moc_vo_calc_amt, 
            SUM(mtc_vo_recd_cnt) AS mtc_vo_recd_cnt, 
            SUM(FLOOR(mtc_vo_use_qnt)) AS mtc_vo_use_qnt, 
            ROUND(SUM(COALESCE((SELECT erate_val FROM eratev 
                            WHERE tgt_mon = REPLACE(setl_month, '-','')), CASE WHEN #{invoc.curCdSel} = 'SDR' THEN 1 ELSE 0 END) * (mtc_vo_calc_amt/erate_val)), #{invoc.decPoint}::int) AS mtc_vo_calc_amt,
            SUM(data_recd_cnt) AS data_recd_cnt,
            SUM(FLOOR(data_use_qnt)) AS data_use_qnt,
            SUM(sms_recd_cnt) AS sms_recd_cnt,  
            SUM(FLOOR(sms_use_qnt)) AS sms_use_qnt, 
            ROUND(SUM(COALESCE((SELECT erate_val FROM eratev 
                            WHERE tgt_mon = REPLACE(setl_month, '-','')), CASE WHEN #{invoc.curCdSel} = 'SDR' THEN 1 ELSE 0 END) * (sms_calc_amt/erate_val)), #{invoc.decPoint}::int) AS sms_calc_amt,
            ROUND(SUM(COALESCE((SELECT erate_val FROM eratev 
                            WHERE tgt_mon = REPLACE(setl_month, '-','')), CASE WHEN #{invoc.curCdSel} = 'SDR' THEN 1 ELSE 0 END) * (data_calc_amt/erate_val)), #{invoc.decPoint}::int) AS data_calc_amt,
            SUM(tot_sum_recd_cnt) AS tot_sum_recd_cnt, 
            ROUND(SUM(COALESCE((SELECT erate_val FROM eratev 
                            WHERE tgt_mon = REPLACE(setl_month, '-','')), CASE WHEN #{invoc.curCdSel} = 'SDR' THEN 1 ELSE 0 END) * (tot_sum_amt/erate_val)), #{invoc.decPoint}::int) AS tot_sum_amt
        FROM (
            SELECT
                ( SUM(COALESCE(moc_vo_lo_recd_cnt,0)) + SUM(COALESCE(moc_vo_home_recd_cnt,0)) + SUM(COALESCE(moc_vo_intl_recd_cnt,0))) AS moc_vo_recd_cnt,   
                (SUM(COALESCE(moc_vo_lo_use_qnt,0)) + SUM(COALESCE(moc_vo_home_use_qnt,0)) + SUM(COALESCE(moc_vo_intl_use_qnt,0))) AS moc_vo_use_qnt,   
                (SUM(COALESCE(moc_vo_lo_setl_amt,0)) + SUM(COALESCE(moc_vo_home_setl_amt,0)) + SUM(COALESCE(moc_vo_intl_setl_amt,0)) +
                 SUM(COALESCE(moc_vo_lo_tax_setl_amt,0)) + SUM(COALESCE(moc_vo_home_tax_setl_amt,0)) + SUM(COALESCE(moc_vo_intl_tax_setl_amt,0))) AS moc_vo_calc_amt,   
                SUM(COALESCE(mtc_vo_recd_cnt,0)) AS mtc_vo_recd_cnt, 
                SUM(COALESCE(mtc_vo_use_qnt,0)) AS mtc_vo_use_qnt, 
                SUM(COALESCE(mtc_vo_setl_amt,0)) + SUM(COALESCE(mtc_vo_tax_setl_amt,0)) AS mtc_vo_calc_amt,  
                (SUM(COALESCE(moc_sms_recd_cnt,0)) + SUM(COALESCE(mtc_sms_recd_cnt,0))) AS sms_recd_cnt,  
                (SUM(COALESCE(moc_sms_use_qnt,0)) + SUM(COALESCE(mtc_sms_use_qnt,0))) AS sms_use_qnt, 
                (SUM(COALESCE(moc_sms_setl_amt,0)) + SUM(COALESCE(mtc_sms_setl_amt,0)) + SUM(COALESCE(moc_sms_tax_setl_amt,0)) + SUM(COALESCE(mtc_sms_tax_setl_amt,0))) AS sms_calc_amt,  
                SUM(COALESCE(data_recd_cnt,0)) AS data_recd_cnt,
                SUM(COALESCE(data_use_qnt,0)) AS data_use_qnt,
                SUM(COALESCE(data_setl_amt,0)) + SUM(COALESCE(data_tax_setl_amt,0)) AS data_calc_amt, 
                (SUM(COALESCE(moc_vo_lo_recd_cnt,0)) + SUM(COALESCE(moc_vo_home_recd_cnt,0)) + SUM(COALESCE(moc_vo_intl_recd_cnt,0)) + 
                SUM(COALESCE(mtc_vo_recd_cnt,0)) + SUM(COALESCE(moc_sms_recd_cnt,0)) + SUM(COALESCE(mtc_sms_recd_cnt,0)) + SUM(COALESCE(data_recd_cnt,0))) AS tot_sum_recd_cnt, 
                (SUM(COALESCE(moc_vo_lo_setl_amt,0)) + SUM(COALESCE(moc_vo_home_setl_amt,0)) + SUM(COALESCE(moc_vo_intl_setl_amt,0)) +
                 SUM(COALESCE(moc_vo_lo_tax_setl_amt,0)) + SUM(COALESCE(moc_vo_home_tax_setl_amt,0)) + SUM(COALESCE(moc_vo_intl_tax_setl_amt,0)) +
                SUM(COALESCE(mtc_vo_setl_amt,0)) + SUM(COALESCE(mtc_vo_tax_setl_amt,0)) +
                SUM(COALESCE(moc_sms_setl_amt,0)) + SUM(COALESCE(mtc_sms_setl_amt,0)) + SUM(COALESCE(moc_sms_tax_setl_amt,0)) + SUM(COALESCE(mtc_sms_tax_setl_amt,0)) + 
                SUM(COALESCE(data_setl_amt,0)) + SUM(COALESCE(data_tax_setl_amt,0))) AS tot_sum_amt,
                max(setl_month) as setl_month,
                max(erate_val) as erate_val
            FROM tb_tap_file_sum dsum     
            INNER JOIN tb_invoc_erate_list rate ON rate.invoc_id = dsum.invoc_id
                                              AND rate.invoc_change_cur = dsum.cur_cd
            WHERE dsum.invoc_id = #{invoc.invocId}
            group by dsum.invoc_id, file_cret_date_val           
        ) AS filter      
    </select>
    
     <!-- invoice pop retrieve invoice daily sum -->
    <select id="retrieveInvDayList" resultType="TapDaySumDomain">
        /*InvoiceMapper.retrieveInvDayList*/
        SELECT
            file_cret_date_val,
            ROUND(sdr_sum_amt, #{invoc.decPoint}::int) AS sdr_sum_amt,
            ROUND(sdr_tax_amt, #{invoc.decPoint}::int) AS sdr_tax_amt,
            ROUND((sdr_sum_amt + sdr_tax_amt ), #{invoc.decPoint}::int) AS sdr_reslt_amt,
            st_tap_seq,
            end_tap_seq
        FROM (
            SELECT
                TO_CHAR(TO_DATE(file_cret_date_val,'YYYYMMDD'),'YYYY-MM-DD') AS file_cret_date_val,  
                (SUM(COALESCE(moc_vo_lo_setl_amt,0)) +
                 SUM(COALESCE(moc_vo_home_setl_amt,0)) +
                 SUM(COALESCE(moc_vo_intl_setl_amt,0)) + 
                 SUM(COALESCE(mtc_vo_setl_amt,0)) +
                 SUM(COALESCE(moc_sms_setl_amt,0)) +
                 SUM(COALESCE(mtc_sms_setl_amt,0)) +
                 SUM(COALESCE(data_setl_amt,0)))/max(erate_val) AS sdr_sum_amt,  
                (SUM(COALESCE(moc_vo_lo_tax_setl_amt,0)) +
                  SUM(COALESCE(moc_vo_home_tax_setl_amt,0)) +
                  SUM(COALESCE(moc_vo_intl_tax_setl_amt,0)) + 
                  SUM(COALESCE(mtc_vo_tax_setl_amt,0)) +
                  SUM(COALESCE(moc_sms_tax_setl_amt,0)) +
                  SUM(COALESCE(mtc_sms_tax_setl_amt,0)) +
                  SUM(COALESCE(data_tax_setl_amt,0)))/max(erate_val) AS sdr_tax_amt,
                min(file_seq_no) as st_tap_seq,
                max(file_seq_no) as end_tap_seq,
                max(erate_val) as erate_val,  
                dsum.invoc_id
            FROM tb_tap_file_sum dsum
            INNER JOIN tb_invoc_erate_list rate ON rate.invoc_id = dsum.invoc_id
                                              AND rate.invoc_change_cur = dsum.cur_cd
            WHERE dsum.invoc_id = #{invoc.invocId}
            group by dsum.invoc_id, file_cret_date_val
        ) AS s
        ORDER BY file_cret_date_val ASC
    </select>
    
    <select id="retrieveInvDayListSum" resultType="TapDaySumDomain">
        /*InvoiceMapper.retrieveInvDayListSum*/
        SELECT
            ROUND(SUM(sdr_sum_amt), #{invoc.decPoint}::int) AS sdr_sum_amt,
            ROUND(SUM(sdr_tax_amt), #{invoc.decPoint}::int) AS sdr_tax_amt,
            ROUND((SUM(sdr_sum_amt) + SUM(sdr_tax_amt)), #{invoc.decPoint}::int) AS sdr_reslt_amt
        FROM (
            SELECT
                TO_CHAR(TO_DATE(file_cret_date_val,'YYYYMMDD'),'YYYY-MM-DD') AS file_cret_date_val,  
                (SUM(COALESCE(moc_vo_lo_setl_amt,0)) +
                 SUM(COALESCE(moc_vo_home_setl_amt,0)) +
                 SUM(COALESCE(moc_vo_intl_setl_amt,0)) + 
                 SUM(COALESCE(mtc_vo_setl_amt,0)) +
                 SUM(COALESCE(moc_sms_setl_amt,0)) +
                 SUM(COALESCE(mtc_sms_setl_amt,0)) +
                 SUM(COALESCE(data_setl_amt,0)))/max(erate_val) AS sdr_sum_amt,  
                (SUM(COALESCE(moc_vo_lo_tax_setl_amt,0)) +
                  SUM(COALESCE(moc_vo_home_tax_setl_amt,0)) +
                  SUM(COALESCE(moc_vo_intl_tax_setl_amt,0)) + 
                  SUM(COALESCE(mtc_vo_tax_setl_amt,0)) +
                  SUM(COALESCE(moc_sms_tax_setl_amt,0)) +
                  SUM(COALESCE(mtc_sms_tax_setl_amt,0)) +
                  SUM(COALESCE(data_tax_setl_amt,0)))/max(erate_val) AS sdr_tax_amt,
                min(file_seq_no) as st_tap_seq,
                max(file_seq_no) as end_tap_seq,
                max(erate_val) as erate_val,  
                dsum.invoc_id
            FROM tb_tap_file_sum dsum
            INNER JOIN tb_invoc_erate_list rate ON rate.invoc_id = dsum.invoc_id
                                              AND rate.invoc_change_cur = dsum.cur_cd
            WHERE dsum.invoc_id = #{invoc.invocId}
            group by dsum.invoc_id, file_cret_date_val
        ) AS s
    </select>
    <!-- invoice contact info -->
    <select id="getInvContactInfo" resultType="InvUser">
        /*InvoiceMapper.getInvContactInfo*/
        SELECT
            fax_no,
            tel_no,
            user_id,
            first_nm,
            last_nm
        FROM tb_invoc_mstr mstr 
        INNER JOIN tb_dc_cont_mstr cmstr ON cmstr.cont_id = mstr.cont_id
        INNER JOIN tb_user_info u ON u.user_id = cmstr.sys_trtr_id
        WHERE mstr.invoc_id = #{invoc.invocId}
    </select>
    
    
    <!-- invoice detail pie chart getInOutCommit -->
    <select id="getInvInOutCommitInfo" parameterType="DashDomain" resultType="DashDomain">
        /*DashboardMapper.getInvInOutCommitInfo*/
        SELECT
             mstr.cont_id, 
             trm_plmn_id, 
             rcv_plmn_id, 
             dtl.cont_dtl_id,
             TO_CHAR(cont_st_date,'YYYY-MM-DD') AS min_setl_day, 
             TO_CHAR(cont_exp_date,'YYYY-MM-DD') AS max_setl_day,
             spcl.fix_amt AS commit_amt,              
             (EXTRACT(YEAR FROM AGE(#{maxSetlDay}::TIMESTAMP,  cont_st_date ))*12 + 
              (EXTRACT(MONTH FROM AGE(#{maxSetlDay}::TIMESTAMP,  cont_st_date )) + 1 )  
             ) *  <!-- 해당 invocie까지의 개월수 -->
             FLOOR(spcl.fix_amt/(EXTRACT(YEAR FROM AGE(cont_exp_date, cont_st_date))*12 + 
                                 (EXTRACT(MONTH FROM AGE(cont_exp_date, cont_st_date))+1) ) ) <!-- 월commit금액 = commintment amt/전체개월수 --> 
                 as cur_commit_amt,  <!-- 해당 invoice월까지의 누적 commit 금액 -->
             spcl.thrs_unit AS cur_cd
        FROM tb_dc_cont_mstr mstr 
        INNER JOIN tb_dc_cont_dtl dtl ON  mstr.cont_id = dtl.cont_id 
                                    AND cont_st_date &lt;= #{minSetlDay}::TIMESTAMP
                                    AND cont_exp_date >= #{minSetlDay}::TIMESTAMP 
                                    AND cont_sttus_cd = 'AGR'
        INNER JOIN tb_dc_cont_spcl_tarif spcl ON dtl.cont_dtl_id =  spcl.cont_dtl_id    
                                    AND spcl.model_type_cd = 'CMIT'
                                    AND spcl.step_no = 1
                                    AND spcl.thrs_type_cd = 'FXC'
        WHERE rcv_plmn_id LIKE '%' || #{rcvPlmnId} || '%' 
          AND trm_plmn_id LIKE '%' || #{trmPlmnId} || '%' 
        LIMIT 1    
    </select>
    
    <!-- in/out bound commitment amt -->
    <select id="getInvInOutCommitAmt" parameterType="DashDomain" resultType="DashDomain">
        /*DashboardMapper.getInOutCommitAmt*/
        SELECT
            ROUND((sum_amt*100)/#{commitAmt}::numeric,1) AS last_percnt, 
            ROUND((sum_amt*100)/#{curCommitAmt}::numeric,1) AS range_percnt 
        FROM (
            SELECT 
                  SUM(COALESCE(tfs.moc_vo_lo_setl_amt,0) +
                      COALESCE(tfs.moc_vo_home_setl_amt,0) +
                      COALESCE(tfs.moc_vo_intl_setl_amt,0) + 
                      COALESCE(tfs.mtc_vo_setl_amt,0) +
                      COALESCE(tfs.moc_sms_setl_amt,0) +
                      COALESCE(tfs.mtc_sms_setl_amt,0) +
                      COALESCE(tfs.data_setl_amt,0) + 
                      COALESCE(tfs.moc_vo_lo_tax_setl_amt,0) +
                      COALESCE(tfs.moc_vo_home_tax_setl_amt,0) +
                      COALESCE(tfs.moc_vo_intl_tax_setl_amt,0) + 
                      COALESCE(tfs.mtc_vo_tax_setl_amt,0) +
                      COALESCE(tfs.moc_sms_tax_setl_amt,0) +
                      COALESCE(tfs.mtc_sms_tax_setl_amt,0) +
                      COALESCE(tfs.data_tax_setl_amt,0)) AS sum_amt
             FROM tb_tap_date_sum tfs
             WHERE setl_month >= SUBSTR(REPLACE(#{minSetlDay},'-',''), 1,6)
             AND setl_month &lt;= SUBSTR(REPLACE(#{maxSetlDay},'-',''), 1,6)
             AND trm_plmn_id = #{trmPlmnId}    
             AND rcv_plmn_id = #{rcvPlmnId}
          ) AS j
    </select>
</mapper>
