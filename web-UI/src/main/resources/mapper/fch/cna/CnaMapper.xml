<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kt.blink.biz.fch.cna.mapper.CnaMapper">

    
    <!-- note reg info -->
    <select id="getInvCnaInfo" resultType="NoteDomain"  parameterType="NoteDomain">
        /*CnaMapper.getInvCnaInfo*/
        SELECT
            invoc_id,
            invoc_nm,
            cre_date_val,
            cont_dtl_id,
            trafc_day,
            trm_cmpn_nm,
            trm_cmpn_adr,
            rcv_cmpn_nm,
            rcv_cmpn_adr,
            trm_plmn_id,
            rcv_plmn_id,
            cont_cur_cd,
            #{invocDirectCd} AS invoc_direct_cd,
            cna || (SELECT CASE WHEN MAX(note_ref_num) IS NULL THEN 0 
                            ELSE MAX(split_part(note_ref_num, '_', 7)::int)+1 END
                    FROM tb_note_mstr
                    WHERE note_ref_num LIKE cna ||'%' ) || '_' ||TO_CHAR(NOW(), 'YYYY-MM-DD') AS cna_note_ref_num,
            cn || (SELECT CASE WHEN MAX(note_ref_num) IS NULL THEN 0 
                            ELSE MAX(split_part(note_ref_num, '_', 7)::int)+1 END
                    FROM tb_note_mstr
                   WHERE note_ref_num LIKE cn ||'%' ) || '_' ||TO_CHAR(NOW(), 'YYYY-MM-DD') AS cn_note_ref_num,
            dn || (SELECT CASE WHEN MAX(note_ref_num) IS NULL THEN 0 
                            ELSE MAX(split_part(note_ref_num, '_', 7)::int)+1 END
                    FROM tb_note_mstr
                   WHERE note_ref_num LIKE dn ||'%' ) || '_' ||TO_CHAR(NOW(), 'YYYY-MM-DD') AS dn_note_ref_num,
            note_amt,
            req_reason,
            first_nm ||' ' ||last_nm AS cont_nm,
            tel_no AS cont_tel_no,
            fax_no AS cont_fax_no,
            user_id AS cont_email,
            note_status_cd,
            note_kind_cd,
            note_issue_month,
            tax_incl_yn,
            tax_aply_pecnt,
            tax_amt,
            org_note_ref_num     
        FROM (
            SELECT
                mstr.invoc_id,
                invoc_nm,
                TO_CHAR(NOW(), 'YYYY-MM-DD') AS cre_date_val,
                cont_dtl_id,
                TO_CHAR(TO_DATE(invoc_use_month, 'YYYYMM'), 'YYYY-MM') AS trafc_day,
                CASE WHEN #{invocDirectCd} = 'IN' THEN rcv_cmpn_nm ELSE trm_cmpn_nm END AS trm_cmpn_nm,
                CASE WHEN #{invocDirectCd} = 'IN' THEN rcv_cmpn_adr ELSE trm_cmpn_adr END AS trm_cmpn_adr,
                CASE WHEN #{invocDirectCd} = 'IN' THEN trm_cmpn_nm ELSE rcv_cmpn_nm END AS rcv_cmpn_nm,
                CASE WHEN #{invocDirectCd} = 'IN' THEN trm_cmpn_adr ELSE rcv_cmpn_adr END AS rcv_cmpn_adr,
                CASE WHEN #{invocDirectCd} = 'IN' THEN rcv_plmn_id ELSE trm_plmn_id END AS trm_plmn_id,
                CASE WHEN #{invocDirectCd} = 'IN' THEN trm_plmn_id ELSE rcv_plmn_id END AS rcv_plmn_id,
                payot_cur_cd AS cont_cur_cd,
                SUBSTRING(REPLACE(invoc_nm, 'INV', 'CNA'), 1, POSITION('GSM_' IN invoc_nm)+3) AS cna,
                SUBSTRING(REPLACE(invoc_nm, 'INV', 'CN'), 1, POSITION('GSM_' IN invoc_nm)+2) as cn,
                SUBSTRING(REPLACE(invoc_nm, 'INV', 'DN'), 1, POSITION('GSM_' IN invoc_nm)+2) as dn,
                NULL AS note_amt,
                '' AS req_reason,
                CASE WHEN #{invocDirectCd} = 'IN' THEN '10' ELSE '50' END AS note_status_cd,
                CASE WHEN #{invocDirectCd} = 'IN' THEN 'CNA' ELSE 'CN' END AS note_kind_cd,
                '' AS note_issue_month,
                'N' AS tax_incl_yn,
                NULL AS tax_aply_pecnt,
                '0' AS tax_amt,
                '' AS org_note_ref_num
            FROM tb_invoc_mstr mstr
            WHERE mstr.invoc_id = #{invocId}
            <if test='noteRefNum != null and noteRefNum !=""'>
               AND 1 = 2
            </if>
            UNION
            SELECT
                invoc_id,
                invoc_nm,
                TO_CHAR(NOW(), 'YYYY-MM-DD') AS cre_date_val,
                cont_dtl_id,
                TO_CHAR(TO_DATE(trafc_day, 'YYYYMM'), 'YYYY-MM') AS trafc_day,
                CASE WHEN #{invocDirectCd} = 'IN' THEN rcv_cmpn_nm ELSE trm_cmpn_nm END AS trm_cmpn_nm,
                CASE WHEN #{invocDirectCd} = 'IN' THEN rcv_cmpn_adr ELSE trm_cmpn_adr END AS trm_cmpn_adr,
                CASE WHEN #{invocDirectCd} = 'IN' THEN trm_cmpn_nm ELSE rcv_cmpn_nm END AS rcv_cmpn_nm,
                CASE WHEN #{invocDirectCd} = 'IN' THEN trm_cmpn_adr ELSE rcv_cmpn_adr END AS rcv_cmpn_adr,
                CASE WHEN #{invocDirectCd} = 'IN' THEN rcv_plmn_id ELSE trm_plmn_id END AS trm_plmn_id,
                CASE WHEN #{invocDirectCd} = 'IN' THEN trm_plmn_id ELSE rcv_plmn_id END AS rcv_plmn_id,
                cont_cur_cd,
                '' AS cna,
                SUBSTRING(REPLACE(invoc_nm, 'INV', 'CN'), 1, POSITION('GSM_' IN invoc_nm)+2) as cn,
                '' as dn,
                COALESCE(note_amt,0) AS note_amt,
                req_reason,
                '50' AS note_status_cd,
                'CN' AS note_kind_cd,
                TO_CHAR(TO_DATE(cre_date_val,'YYYYMMDD'),'YYYYMM') AS note_issue_month,
                tax_incl_yn,
                COALESCE(tax_aply_pecnt,0) AS tax_aply_pecnt,
                COALESCE(tax_amt,0) AS tax_amt,
                note_ref_num AS org_note_ref_num
            FROM tb_note_mstr
            WHERE note_ref_num = #{noteRefNum}
            <if test='noteRefNum == null or noteRefNum ==""'>
               AND 1 = 2
            </if>
        ) AS j
        LEFT OUTER JOIN (
            SELECT
                fax_no,
                tel_no,
                user_id,
                first_nm,
                last_nm
            FROM tb_user_info
            WHERE user_id = #{userId}
        ) cont ON 1 = 1
    </select>
    
    <!-- update note -->
    <update id="updateNote"  parameterType="NoteDomain">
        /*CnaMapper.updateNote*/
        UPDATE tb_note_mstr
        SET
            note_status_cd = '50',
            sys_recd_chg_dt = NOW(),
            sys_trtr_id = #{sysTrtrId},
            sys_svc_id = #{sysSvcId}
        WHERE note_ref_num = #{orgNoteRefNum}
    </update>
    
    <!-- insert note -->
    <insert id="insertNote" parameterType="NoteDomain">
        /*CnaMapper.insertNote*/
        <selectKey keyProperty="creDateVal,trafcDay,noteIssueMonth,taxAmt,taxNo" resultType="NoteDomain" order="BEFORE">
            SELECT
                REPLACE(#{creDateVal},'-','') AS creDateVal,
                REPLACE(#{trafcDay},'-','') AS trafcDay, 
                SUBSTRING(REPLACE(#{creDateVal},'-',''),1, 6) AS noteIssueMonth, 
                CASE WHEN #{taxInclYn} = 'Y' AND COALESCE(#{noteAmt}::numeric,0) > 0 THEN ROUND(COALESCE(#{noteAmt}::numeric,0)/(COALESCE(#{taxAplyPecnt}::numeric,0)*100), #{decPoint}::int)
                      ELSE 0 END AS taxAmt, 
                (SELECT tax_no FROM tb_cmpn_info 
                 WHERE cmpn_nm = TRIM(#{rcvCmpnNm}) LIMIT 1) AS taxNo 
        </selectKey>
        INSERT INTO tb_note_mstr (
            trm_plmn_id, 
            rcv_plmn_id, 
            sys_recd_cret_dt, 
            sys_recd_chg_dt, 
            sys_trtr_id, 
            sys_svc_id, 
            cre_date_val, 
            note_ref_num, 
            invoc_id, 
            invoc_nm, 
            trafc_day, 
            note_amt, 
            cont_cur_cd, 
            req_reason, 
            cont_nm, 
            cont_tel_no, 
            cont_fax_no, 
            cont_email, 
            cont_dtl_id, 
            note_status_cd, 
            note_kind_cd, 
            trm_cmpn_nm, 
            rcv_cmpn_nm, 
            tax_incl_yn, 
            tax_aply_pecnt, 
            tax_amt,
            trm_cmpn_adr,
            rcv_cmpn_adr,
            tax_no
        ) 
        VALUES
        (   
            #{trmPlmnId},
            #{rcvPlmnId},
            NOW(),
            NOW(),
            #{sysTrtrId},
            #{sysSvcId},
            #{creDateVal},
            #{noteRefNum},
            #{invocId},
            #{invocNm},
            #{trafcDay}, 
            COALESCE(#{noteAmt}::numeric,0),
            #{contCurCd},
            #{reqReason},
            #{contNm},
            #{contTelNo},
            #{contFaxNo},
            #{contEmail},
            #{contDtlId},
            #{noteStatusCd},
            #{noteKindCd},
            #{trmCmpnNm},
            #{rcvCmpnNm},
            #{taxInclYn},
            COALESCE(#{taxAplyPecnt}::numeric,0),
            #{taxAmt}::numeric,
            #{trmCmpnAdr},
            #{rcvCmpnAdr},
            #{taxNo}
        )
    </insert>
    <!-- insert note amt list -->
    <insert id="insertNoteAmt"  parameterType="NoteDomain">
        /*CnaMapper.insertNoteAmt*/
        INSERT INTO tb_note_amt_list (
            note_ref_num, 
            note_cur, 
            sys_recd_cret_dt, 
            sys_recd_chg_dt, 
            sys_trtr_id, 
            sys_svc_id, 
            note_amt, 
            tax_amt, 
            tot_amt
        )
        SELECT
		    #{noteRefNum},
		    en.cur_cd,
		    NOW(),
            NOW(),
            #{sysTrtrId},
            #{sysSvcId}, 
		    ROUND(en.note_amt,#{decPoint}::int) AS note_amt,
		    ROUND(en.tax_amt,#{decPoint}::int) AS tax_amt,
		    ROUND(en.tot_amt,#{decPoint}::int) AS tot_amt
		FROM (
			SELECT  <!-- SDR AMT -->
			    m.invoc_id,
			    ROUND(note_amt/e.erate_val,#{decPoint}::int) AS note_amt,
			    ROUND(tax_amt/e.erate_val,#{decPoint}::int) AS tax_amt,
			    ROUND(note_amt/e.erate_val,#{decPoint}::int) + ROUND(tax_amt/e.erate_val,#{decPoint}::int) AS tot_amt,
			    'SDR' AS cur_cd
			FROM tb_note_mstr m
			INNER JOIN tb_invoc_erate_list e ON e.invoc_id = m.invoc_id
			                            AND e.invoc_bas_cur = 'SDR'
			                            AND e.invoc_change_cur = m.cont_cur_cd
			WHERE note_ref_num = #{noteRefNum}
			UNION
			SELECT  <!-- NOTE AMT -->
			    invoc_id,
			    note_amt,
			    tax_amt,
			    (note_amt + tax_amt) AS tot_amt,
			    cont_cur_cd AS cur_cd
			FROM tb_note_mstr m
			WHERE note_ref_num = #{noteRefNum}
			UNION
			SELECT <!-- CONTRACT AMT -->
			    s.invoc_id,
			    ROUND(sdr_amt * er.erate_val,#{decPoint}::int) AS note_amt,
			    ROUND(sdr_tax_amt * er.erate_val,#{decPoint}::int) AS note_tax_amt,
			    ROUND(sdr_amt * er.erate_val,#{decPoint}::int) + ROUND(sdr_tax_amt * er.erate_val,#{decPoint}::int) AS tot_amt, 
			    er.invoc_change_cur
			FROM (
			    SELECT
			        m.invoc_id,
			        note_amt,
			        note_amt/e.erate_val AS sdr_amt,
			        tax_amt/e.erate_val AS sdr_tax_amt,
			        cont_cur_cd
			    FROM tb_note_mstr m
			    INNER JOIN tb_invoc_erate_list e ON e.invoc_id = m.invoc_id
			                                AND e.invoc_bas_cur = 'SDR'
			                                AND e.invoc_change_cur = m.cont_cur_cd
			    WHERE note_ref_num = #{noteRefNum}
			) AS s
			INNER JOIN tb_invoc_erate_list er ON er.invoc_id = s.invoc_id
			                            AND er.invoc_bas_cur = 'SDR'
			                            AND er.invoc_change_cur != s.cont_cur_cd
		) AS en
    </insert>
    
    <!-- note info -->
    <select id="getNoteInfo" resultType="NoteDomain"  parameterType="NoteDomain">
        /*CnaMapper.getNoteInfo*/
        SELECT
            invoc_id,
            invoc_nm,
            note_ref_num,
            TO_CHAR(TO_DATE(cre_date_val,'YYYYMMDD'), 'YYYY-MM-DD') AS cre_date_val,
            cont_dtl_id,
            TO_CHAR(TO_DATE(trafc_day, 'YYYYMM'), 'YYYY-MM') AS trafc_day,
            trm_cmpn_nm,
            trm_cmpn_adr,
            rcv_cmpn_nm,
            rcv_cmpn_adr,
            trm_plmn_id,
            rcv_plmn_id,
            cont_cur_cd,
            COALESCE(note_amt,0) AS note_amt,
            req_reason,
            note_status_cd,
            note_kind_cd,
            (SELECT
	               tci.cd_val1
	           FROM tb_cd_info tci 
	           INNER JOIN tb_cd_group_info tcgi
	           ON tcgi.cd_group_id = tci.cd_group_id
	           WHERE tci.cd_group_id = 'InvKind'
	           AND tci.cd_id = note_kind_cd
	           AND tci.use_yn = true ) AS note_kind_cd_nm,
            TO_CHAR(TO_DATE(cre_date_val,'YYYYMMDD'),'YYYYMM') AS note_issue_month,
            tax_incl_yn,
            COALESCE(tax_aply_pecnt,0) AS tax_aply_pecnt,
            COALESCE(tax_amt,0) AS tax_amt,
            cont_nm, 
            cont_tel_no, 
            cont_fax_no, 
            cont_email,
            tax_no
        FROM tb_note_mstr
        WHERE note_ref_num = #{noteRefNum}
    </select>
    
    <!-- note amt list -->
    <select id="getNoteAmtList" resultType="NoteAmtListDomain"  parameterType="NoteDomain">
        /*CnaMapper.getNoteAmtList*/
        SELECT
            l.note_ref_num,
            l.note_cur,
            ROUND(l.note_amt, #{decPoint}::int) AS note_amt,
            ROUND(l.tax_amt, #{decPoint}::int) AS tax_amt,
            ROUND(l.note_amt, #{decPoint}::int) + ROUND(l.tax_amt, #{decPoint}::int) AS tot_amt
        FROM tb_note_amt_list l
        INNER JOIN tb_note_mstr m ON m.note_ref_num = l.note_ref_num
        WHERE l.note_ref_num = #{noteRefNum}
        ORDER BY CASE WHEN l.note_cur = 'SDR' THEN 'ZZZ' ELSE l.note_cur END ASC
    </select>
    
    
    <!-- note reg dup check -->
    <select id="checkNoteNumDup" resultType="NoteDomain"  parameterType="NoteDomain">
        /*CnaMapper.checkNoteNumDup*/
        SELECT
            invoc_id,
            invoc_nm,
            CASE WHEN #{noteKindCd} = 'CNA' THEN
				            cna || (SELECT CASE WHEN MAX(note_ref_num) IS NULL THEN 0 
				                            ELSE MAX(split_part(note_ref_num, '_', 7)::int)+1 END
				                    FROM tb_note_mstr
				                    WHERE note_ref_num LIKE cna ||'%' ) || '_' ||TO_CHAR(NOW(), 'YYYY-MM-DD')
                 WHEN #{noteKindCd} = 'CN' THEN  
				            cn || (SELECT CASE WHEN MAX(note_ref_num) IS NULL THEN 0 
				                            ELSE MAX(split_part(note_ref_num, '_', 7)::int)+1 END
				                    FROM tb_note_mstr
				                   WHERE note_ref_num LIKE cn ||'%' ) || '_' ||TO_CHAR(NOW(), 'YYYY-MM-DD')
		      ELSE 		                   
				            dn || (SELECT CASE WHEN MAX(note_ref_num) IS NULL THEN 0 
				                            ELSE MAX(split_part(note_ref_num, '_', 7)::int)+1 END
				                    FROM tb_note_mstr
				                   WHERE note_ref_num LIKE dn ||'%' ) || '_' ||TO_CHAR(NOW(), 'YYYY-MM-DD') END AS note_ref_num
        FROM (
            SELECT
                mstr.invoc_id,
                invoc_nm,
                SUBSTRING(REPLACE(invoc_nm, 'INV', 'CNA'), 1, POSITION('GSM_' IN invoc_nm)+3) AS cna,
                SUBSTRING(REPLACE(invoc_nm, 'INV', 'CN'), 1, POSITION('GSM_' IN invoc_nm)+2) as cn,
                SUBSTRING(REPLACE(invoc_nm, 'INV', 'DN'), 1, POSITION('GSM_' IN invoc_nm)+2) as dn
            FROM tb_invoc_mstr mstr
            WHERE mstr.invoc_id = #{invocId}
            AND EXISTS (SELECT
		                1
		            FROM tb_note_mstr s
		            WHERE s.note_ref_num = #{noteRefNum}
		              AND s.invoc_id = mstr.invoc_id)
        ) AS j
    </select>
</mapper>
