<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    @SQL File Name : ErateMapper.xml
    @Description : erate 
    @Author : stone
-->
<mapper namespace="com.kt.blink.biz.admin.erate.mapper.ErateMapper"> 

    <!-- retrieve erate -->
    <select id="retrieveErateList" resultType="ErateDomain">
        /*ErateMapper.retrieveErateList*/
        WITH currv AS (
			SELECT cd_id, cd_val1
			FROM tb_cd_info
			WHERE cd_group_id = 'ExRateCurrency'
		)
        SELECT
          COUNT(1) OVER() AS totalCount,
          erate.base_isocu_cd,
          erate.tgt_isocu_cd  || '(' || (select cd_id from currv where currv.cd_val1 = erate.tgt_isocu_cd)  || ')' as  tgt_isocu_cd_view,
          erate.tgt_isocu_cd,
          erate.tgt_mon,
          CASE WHEN erate.tgt_mon::numeric >= TO_CHAR(now(),'YYYYMM')::numeric THEN 1 ELSE 0 END AS edit,
          TO_CHAR(TO_DATE(erate.tgt_mon,'YYYYMM'),'YYYY-MM') AS tgt_view_mon,
          TO_CHAR(erate.base_day,'YYYYMMDD') AS base_day,
          TO_CHAR(erate.base_day,'YYYY-MM-DD') AS base_view_day,
          erate.erate_val,
          erate.erate_val AS erate_old_val,
          sys_recd_chg_dt
        FROM tb_erate_info erate
        <where>
            <foreach collection="columns" item="column" index="index" separator="and">
                <if test="column.search.value != null and column.search.value != ''">
                    <choose>
                        <when test="column.name == 'tgt_isocu_cd'">
                        ${column.name} IN (SELECT UNNEST(STRING_TO_ARRAY(#{column.search.value}, ',')))
                        </when>
                        <otherwise>
                    ${column.name} LIKE '%' || #{column.search.value} || '%'
                        </otherwise>
                    </choose>
                </if>
            </foreach>
        </where>
        <if test="orderSequel != null and orderSequel != ''">
            ORDER BY ${orderSequel}
        </if>
        LIMIT #{length} OFFSET #{start}    
    </select>
    <!-- get period m, m+1 month -->
    <select id="getTgtMons" resultType="ErateDomain">
        /*ErateMapper.findErateInfo*/
        SELECT
		    TO_CHAR(NOW(),'YYYYMM') AS tgt_mon,
		    TO_CHAR(NOW(),'YYYY-MM') AS tgt_view_mon
		UNION
		SELECT  
		    TO_CHAR(NOW() + '1 MONTH' ,'YYYYMM') AS tgt_mon,
            TO_CHAR(NOW() + '1 MONTH' ,'YYYY-MM') AS tgt_view_mon
    </select>

    
    <!-- insert erate -->
    <insert id="insertErate">
        /*ErateMapper.insertErate*/        
        INSERT INTO tb_erate_info
        (
          base_isocu_cd,
          tgt_isocu_cd,
          tgt_mon,
          base_day,
          erate_val,
          sys_recd_cret_dt,
          sys_recd_chg_dt,
          sys_trtr_id,
          sys_svc_id          
        ) 
        VALUES 
        (   
          'SDR',
          #{erate.tgtIsocuCd},
          #{erate.tgtMon},
          #{erate.baseDay}::timestamp,
          #{erate.erateVal}::numeric, 
          NOW(),
          NOW(),
          #{erate.sysTrtrId},
          #{erate.sysSvcId}
        )
    </insert>
    <!-- update erate -->
    <update id="updateErate">
        /*ErateMapper.updateErate*/
        UPDATE tb_erate_info SET
          base_day = #{erate.baseDay}::timestamp,
          erate_val = #{erate.erateVal}::numeric,
          sys_recd_chg_dt = NOW(),
          sys_trtr_id = #{erate.sysTrtrId},
          sys_svc_id = #{erate.sysSvcId}
        WHERE base_isocu_cd = #{erate.baseIsocuCd}
         AND tgt_isocu_cd = #{erate.tgtIsocuCd}
         AND tgt_mon = #{erate.tgtMon}
    </update>
    
    <!-- insert hst -->
    <insert id="insertErateHst">
        /*ErateMapper.insertErateHst*/
        INSERT INTO tb_erate_hst (   
            base_isocu_cd, 
            tgt_isocu_cd, 
            tgt_mon, 
            base_day, 
            erate_val, 
            sys_trtr_id, 
            sys_svc_id, 
            sys_recd_cret_dt, 
            sys_recd_chg_dt
        )
        SELECT
            base_isocu_cd, 
            tgt_isocu_cd, 
            tgt_mon, 
            base_day, 
            erate_val, 
            sys_trtr_id, 
            sys_svc_id, 
            sys_recd_cret_dt, 
            sys_recd_chg_dt
        FROM tb_erate_info
        WHERE base_isocu_cd = #{erate.baseIsocuCd}
         AND tgt_isocu_cd = #{erate.tgtIsocuCd}
         AND tgt_mon = #{erate.tgtMon}
    </insert>
    
    <!-- delete erate -->
    <delete id="deleteErate">
        /*ErateMapper.deleteErate*/
        DELETE FROM tb_erate_info
        WHERE base_isocu_cd = #{erate.baseIsocuCd}
         AND tgt_isocu_cd = #{erate.tgtIsocuCd}
         AND tgt_mon = #{erate.tgtMon}
    </delete>
        
    <!-- find erate -->
    <select id="findErateInfo" resultType="ErateDomain">
        /*ErateMapper.findErateInfo*/
        SELECT
          erate.tgt_isocu_cd,
          erate.tgt_mon,
          erate.base_day,
          erate.erate_val
        FROM tb_erate_info erate
        WHERE base_isocu_cd = #{erate.baseIsocuCd}
         AND tgt_isocu_cd = #{erate.tgtIsocuCd}
         AND tgt_mon = #{erate.tgtMon}
    </select>
    
    <!-- dup check -->
    <select id="dupCheckErate" resultType="ErateDomain">
        /*ErateMapper.dupCheckErate*/
        SELECT
          CASE WHEN MAX(tgt_mon) IS NULL THEN 0
           ELSE 1 END AS erate_cnt
        FROM tb_erate_info
       WHERE base_isocu_cd = #{erate.baseIsocuCd}
         AND tgt_isocu_cd = #{erate.tgtIsocuCd}
         AND tgt_mon = #{erate.tgtMon}
         LIMIT 1
    </select>
    
    <!-- periods list -->
    <select id="getPeriods" resultType="ErateDomain">
        /*ErateMapper.getPeriods*/
        SELECT
          distinct tgt_mon,
          TO_CHAR(TO_DATE(tgt_mon,'YYYYMM'),'YYYY-MM') AS tgt_view_mon
        FROM tb_erate_info
        UNION
        SELECT  
            TO_CHAR(NOW() + '1 MONTH' ,'YYYYMM') AS tgt_mon,
            TO_CHAR(NOW() + '1 MONTH' ,'YYYY-MM') AS tgt_view_mon            
        ORDER BY tgt_mon DESC
    </select>
</mapper>
