<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    @SQL File Name : PlmnMapper.xml
    @Description : plmn 
    @Author : stone
-->
<mapper namespace="com.kt.blink.biz.admin.plmn.mapper.PlmnsMapper"> 

    <!-- retrieve plmn -->
    <select id="retrievePlmnList" resultType="PlmnsDomain">
        /*PlmnMapper.retrievePlmnList*/
        SELECT
            COUNT(1) OVER() AS totalCount,
            plmn_id,
            plmn_nm,
            mcc_id,
            mnc_id,
            efct_st_dt,
            exp_dt,
            cntry_cd,
            cntry_nm
        FROM (
	        SELECT
	          COUNT(1) OVER() AS totalCount,
	          plmn.plmn_id,
	          plmn.plmn_nm,
	          plmn.mcc_id,
	          plmn.mnc_id,
	          plmn.efct_st_dt,
	          plmn.exp_dt,
	          cntry.cntry_cd,
	          cntry.cntry_nm
	        FROM tb_plmn_info plmn
	        LEFT OUTER JOIN tb_cntry_info AS cntry ON cntry.mcc_id = plmn.mcc_id
        ) AS P
        <where>
            <foreach collection="columns" item="column" index="index" separator="and">
                <if test="column.search.value != null and column.search.value != ''">
                    ${column.name} LIKE '%' || #{column.search.value} || '%'
                </if>
            </foreach>
        </where>
        <if test="orderSequel != null and orderSequel != ''">
            ORDER BY ${orderSequel}
        </if>
        LIMIT #{length} OFFSET #{start}    
    </select>

    
    <!-- insert plmn -->
    <insert id="insertPlmn">
        /*PlmnMapper.insertPlmn*/        
        INSERT INTO tb_plmn_info
        (
          plmn_id,
          plmn_nm,
          mcc_id,
          mnc_id,
          efct_st_dt,
          exp_dt,
          sys_recd_cret_dt,
          sys_recd_chg_dt,
          sys_trtr_id,
          sys_svc_id          
        ) 
        VALUES 
        (   
          #{plmn.plmnId},
          #{plmn.plmnNm},
          #{plmn.mccId},
          #{plmn.mncId},
          NOW(),
          TO_DATE('99991231','YYYYMMDD'),
          NOW(),
          NOW(),
          #{plmn.sysTrtrId},
          #{plmn.sysSvcId}
        )
    </insert>
    <!-- update plmn -->
    <update id="updatePlmn">
        /*PlmnMapper.updatePlmn*/
        UPDATE tb_plmn_info SET
          plmn_id = #{plmn.plmnId},
          plmn_nm = #{plmn.plmnNm},
          mcc_id = #{plmn.mccId},
          mnc_id = #{plmn.mncId},
          sys_recd_chg_dt = NOW(),
          sys_trtr_id = #{plmn.sysTrtrId},
          sys_svc_id = #{plmn.sysSvcId}
        WHERE mcc_id = #{plmn.orgMccId}
          AND mnc_id = #{plmn.orgMncId}
          AND exp_dt = #{plmn.expDt}::timestamp
    </update>
    
    <!-- delete plmn -->
    <delete id="deletePlmn">
        /*PlmnMapper.delete*/
        DELETE FROM tb_plmn_info
        WHERE mcc_id = #{plmn.mccId}
          AND mnc_id = #{plmn.mncId}
          AND exp_dt = #{plmn.expDt}::timestamp
    </delete>
    
    
    <!-- find plmn -->
    <select id="findPlmnInfo" resultType="PlmnsDomain">
        /*PlmnMapper.findPlmnInfo*/
        SELECT
          plmn.plmn_id,
          plmn.plmn_nm,
          plmn.mcc_id,
          plmn.mnc_id,
          plmn.efct_st_dt,
          plmn.exp_dt,
          cntry.cntry_cd,
          cntry.cntry_nm
        FROM tb_plmn_info plmn
        LEFT OUTER JOIN tb_cntry_info AS cntry ON plmn.mcc_id = cntry.mcc_id
        WHERE plmn.mcc_id = #{plmn.mccId}
          AND plmn.mnc_id = #{plmn.mncId}
          AND plmn.exp_dt = #{plmn.expDt}::timestamp
    </select>
    
    <select id="dupCheckPlmn" resultType="PlmnsDomain">
        /*PlmnMapper.dupCheckPlmn*/
        SELECT
          COALESCE(SUM(CASE WHEN UPPER(plmn_id) = UPPER(#{plmn.plmnId}) THEN 1 ELSE 0 END),0) AS plmn_id_cnt,
          COALESCE(SUM(CASE WHEN UPPER(mnc_id) = UPPER(#{plmn.mncId}) THEN 1 ELSE 0 END),0) AS mnc_id_cnt
        FROM tb_plmn_info plmn
       <where>
            <if test='plmn.plmnStat != null and plmn.plmnStat =="U"'>
            NOT EXISTS (SELECT '1' FROM tb_plmn_info inn
		                  WHERE inn.mcc_id = #{plmn.orgMccId}
		                  AND inn.mnc_id = #{plmn.orgMncId}
		                  AND inn.exp_dt = #{plmn.expDt}::timestamp
		                  AND plmn.mcc_id = inn.mcc_id
				          AND plmn.mnc_id = inn.mnc_id
				          AND plmn.exp_dt = inn.exp_dt )
            </if>
        </where>  
    </select>
    
    <!-- partner plmn -->
    <select id="getPartnerPlmns" resultType="PlmnsDomain">
        /*PlmnMapper.getPartnerPlmns*/
        SELECT
          plmn.plmn_id,
          plmn.plmn_nm,
          plmn.mcc_id,
          plmn.mnc_id,
          plmn.efct_st_dt,
          plmn.exp_dt 
        FROM tb_plmn_info plmn
        WHERE NOT EXISTS (SELECT '1' FROM tb_cd_info tci 
                            INNER JOIN tb_cd_group_info tcgi
                            ON tcgi.cd_group_id = tci.cd_group_id
                            WHERE tci.cd_group_id = 'MyNetwork'
                            AND tci.use_yn = true 
                            AND plmn.plmn_id = tci.cd_id) 
        ORDER BY plmn.plmn_id
    </select>
    
</mapper>
